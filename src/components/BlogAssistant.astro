---
// website/src/components/BlogAssistant.astro
import ChipButton from "./ChipButton.astro"; // Import the new component

interface Props {
  slug: string; // The slug of the current blog post, passed from the layout
}
const { slug } = Astro.props;
---

<div class="assistant-ui-container hidden" data-post-slug={slug}>
  <div id="ai-input-pane" class="assistant-pane input-area">
    <div class="input-controls">
      {/* New wrapper for flex layout */}
      <textarea
        id="ai-question-input"
        rows="2"
        placeholder="E.g., What is 'data curation'?"
        aria-label="Ask the AI assistant a question about this blog post"
      ></textarea>
      <ChipButton
        id="ask-ai-button"
        type="button"
        wrapperClass="ai-panel-chip-button-wrapper">Ask AI</ChipButton
      >
    </div>
    <div class="mode-toggle-container">
      <label class="mode-toggle-label" for="rag-toggle" title="Retrieval-Augmented Generation uses a search index for faster, more focused answers.">
        <input type="checkbox" id="rag-toggle" class="mode-toggle-checkbox" checked />
        <span>Use RAG (Fast)</span>
      </label>
    </div>
  </div>
  <div id="response-pane-wrapper">
    <div id="ai-response-pane" class="assistant-pane scrollable-pane">
      <!-- Chat history will be rendered here -->
    </div>
    <button
      id="toggle-response-expand-button"
      class="response-expand-toggle-button"
      aria-label="Expand response area"
      title="Expand response area"
    >
      <span class="material-icons">unfold_more</span>
    </button>
  </div>
</div>

<script>
  // This script runs in the browser
  document.addEventListener("DOMContentLoaded", () => {
    const assistantContainer = document.querySelector(
      ".assistant-ui-container",
    ) as HTMLElement | null;
    if (!assistantContainer) {
      console.error("BlogAssistant UI container not found.");
      return;
    }

    const postSlug = assistantContainer.dataset.postSlug;
    const responsePane = assistantContainer.querySelector(
      "#ai-response-pane",
    ) as HTMLElement | null;
    const questionInput = assistantContainer.querySelector(
      "#ai-question-input",
    ) as HTMLTextAreaElement | null;
    const askButton = assistantContainer.querySelector(
      "#ask-ai-button",
    ) as HTMLButtonElement | null;
    const ragToggle = assistantContainer.querySelector(
      "#rag-toggle",
    ) as HTMLInputElement | null;
    
    const responsePaneWrapper = assistantContainer.querySelector(
      "#response-pane-wrapper",
    ) as HTMLElement | null;
    const toggleResponseExpandButton = assistantContainer.querySelector(
      "#toggle-response-expand-button",
    ) as HTMLButtonElement | null;
    const blogContentPane = document.querySelector(".blog-content-pane") as HTMLElement | null; // Query for the sibling

    // Get reference to the FAB's CONTAINER defined in BlogPostLayout.astro
    const fabContainer = document.getElementById(
      "fab-container",
    ) as HTMLElement | null;

    if (
      !postSlug ||
      !responsePane ||
      !questionInput ||
      !askButton ||
      !ragToggle || // Add to check
      !fabContainer ||
      !responsePaneWrapper ||
      !toggleResponseExpandButton ||
      !blogContentPane // Add to the check
    ) {
      console.error(
        "One or more BlogAssistant UI elements (including RAG toggle), the FAB container, expand/collapse elements, or blogContentPane are missing.",
      );
      return;
    }

    let currentReaderId = "";
    let currentSessionId = "";
    let isResponsePaneExpanded = false;

    function getOrSetReaderId(): string {
      let readerId = localStorage.getItem("blgcAiReaderId");
      if (!readerId) {
        readerId = crypto.randomUUID();
        localStorage.setItem("blgcAiReaderId", readerId);
      }
      return readerId;
    }

    function generateNewSessionId(): string {
      const sessionStartTime = new Date().toISOString();

      // Generate 6 random bytes for the suffix
      const randomBytes = new Uint8Array(6);
      crypto.getRandomValues(randomBytes);

      // Convert bytes to a string, then to base64
      let base64Suffix = btoa(String.fromCharCode(...randomBytes));

      // Convert to base64url: replace + with -, / with _, and remove padding =
      base64Suffix = base64Suffix
        .replace(/\+/g, "-")
        .replace(/\//g, "_")
        .replace(/=+$/, "");

      return `${currentReaderId}_${sessionStartTime}_${base64Suffix}`;
    }

    currentReaderId = getOrSetReaderId();

    let chatHistory: Array<{
      type: "user" | "ai" | "system" | "error";
      content: string;
      feedbackRating?: "like" | "dislike";
      durationMs?: number;
    }> = [];
    const initialMessage =
      "Hello! Ask me any technical questions about this blog post.";

    const renderChatHistory = () => {
      if (!responsePane) return;
      responsePane.innerHTML = ""; 

      if (chatHistory.length === 0) {
        const placeholderElement = document.createElement("div");
        placeholderElement.classList.add("chat-message", "system-message");
        placeholderElement.innerHTML = initialMessage.replace(/\n/g, "<br>");
        responsePane.appendChild(placeholderElement);
      } else {
        for (let i = chatHistory.length - 1; i >= 0; i -= 2) {
          const currentMessage = chatHistory[i]; 
          const previousMessage = chatHistory[i - 1]; 

          if (i < chatHistory.length - 1) {
            const separatorElement = document.createElement("div");
            separatorElement.classList.add("chat-pair-separator");
            responsePane.appendChild(separatorElement);
          }

          if (previousMessage) {
            const questionElement = document.createElement("div");
            questionElement.classList.add(
              "chat-message",
              `${previousMessage.type}-message`,
            );

            // Create a span for the question text content
            const questionTextSpan = document.createElement('span');
            let questionHTML = `üó£Ô∏è <strong>${previousMessage.content.replace(/\n/g, "<br>")}</strong>`;

            // If this AI message has a preceding user message, prepare feedback buttons HTML
            if (currentMessage.type === "ai" && previousMessage && previousMessage.type === "user") {
              const aiMessageWithFeedback = currentMessage;
              const likeButtonId = `like-btn-${i}`;
              const dislikeButtonId = `dislike-btn-${i}`;

              let likeBtnClasses = "feedback-button feedback-like";
              let dislikeBtnClasses = "feedback-button feedback-dislike";
              let likeBtnDisabled = "";
              let dislikeBtnDisabled = "";

              if (aiMessageWithFeedback.feedbackRating) {
                likeBtnDisabled = "disabled";
                dislikeBtnDisabled = "disabled";
                if (aiMessageWithFeedback.feedbackRating === "like") {
                  likeBtnClasses += " selected";
                  dislikeBtnClasses += " hidden";
                } else { // feedbackRating === "dislike"
                  dislikeBtnClasses += " selected";
                  likeBtnClasses += " hidden";
                }
              }

              let durationHTML = '';
              if (typeof aiMessageWithFeedback.durationMs === 'number') {
                const durationSeconds = (aiMessageWithFeedback.durationMs / 1000).toFixed(2);
                durationHTML = `<span class="response-duration" title="Response generation time">(${durationSeconds}s)</span>`;
              }

              const feedbackHTMLString = `
                <span class="feedback-container-inline">
                  <button id="${likeButtonId}" class="${likeBtnClasses}" title="Like this response" ${likeBtnDisabled}>üëç</button>
                  <button id="${dislikeButtonId}" class="${dislikeBtnClasses}" title="Dislike this response" ${dislikeBtnDisabled}>üëé</button>
                  ${durationHTML}
                </span>
              `;
              questionHTML += feedbackHTMLString;
            }

            questionTextSpan.innerHTML = questionHTML;
            questionElement.appendChild(questionTextSpan);
            responsePane.appendChild(questionElement);

            // After innerHTML is set, attach event listeners if feedback buttons were added
            if (currentMessage.type === "ai" && previousMessage && previousMessage.type === "user") {
              const likeButtonId = `like-btn-${i}`;
              const dislikeButtonId = `dislike-btn-${i}`;
              
              const likeButton = questionElement.querySelector(`#${likeButtonId}`);
              const dislikeButton = questionElement.querySelector(`#${dislikeButtonId}`);

              if (likeButton) {
                likeButton.addEventListener("click", (e) => {
                  handleFeedbackClick(e.currentTarget as HTMLButtonElement, i, "like");
                });
              }
              if (dislikeButton) {
                dislikeButton.addEventListener("click", (e) => {
                  handleFeedbackClick(e.currentTarget as HTMLButtonElement, i, "dislike");
                });
              }
            }
          }

          const answerElement = document.createElement("div");
          answerElement.classList.add(
            "chat-message",
            `${currentMessage.type}-message`,
          );
          answerElement.innerHTML = currentMessage.content.replace(
            /\n/g,
            "<br>",
          );

          responsePane.appendChild(answerElement);
        }
      }
      responsePane.scrollTop = 0;
    };

    async function handleFeedbackClick(buttonElement: HTMLButtonElement, aiMessageIndex: number, rating: "like" | "dislike") {
      const aiMessage = chatHistory[aiMessageIndex];
      const userMessage = chatHistory[aiMessageIndex - 1];

      if (!aiMessage || aiMessage.type !== 'ai' || !userMessage || userMessage.type !== 'user') {
        console.error("Invalid message context for feedback.");
        return;
      }

      // If already voted, do nothing.
      if (aiMessage.feedbackRating) {
        console.log("Already voted on this item.");
        return;
      }

      // Store the rating in the chat history
      aiMessage.feedbackRating = rating;

      // Re-render the chat history to reflect the new state
      renderChatHistory();

      // Proceed with API call (visual state is now handled by renderChatHistory)
      const aiResponseContent = aiMessage.content;
      const userQuestionContent = userMessage.content;
      const parentContainer = buttonElement.parentElement; // Still useful for logging context if needed

      try {
        const feedbackTimestamp = new Date().toISOString();
        const response = await fetch("/api/feedback", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            slug: postSlug,
            readerId: currentReaderId,
            sessionId: currentSessionId,
            aiResponseContent: aiResponseContent,
            userQuestionContext: userQuestionContent,
            rating: rating,
            feedbackTimestamp: feedbackTimestamp,
          }),
        });

        if (response.ok) {
          console.log(`Feedback (${rating}) submitted successfully.`);
          // Visual state is already persistent due to chatHistory update and re-render.
        } else {
          const errorText = await response.text(); 
          console.error(`Failed to submit feedback. Status: ${response.status}, Response: ${errorText}`);
          // The visual state remains "voted" as per the requirement.
          // No need to revert UI changes here.
        }
      } catch (error) {
        console.error("Client-side error submitting feedback:", error);
        // The visual state remains "voted".
        // No need to revert UI changes here.
      }
    }

    const collapseResponsePane = () => {
        if (!isResponsePaneExpanded) return; // Already collapsed

        isResponsePaneExpanded = false;
        responsePaneWrapper.classList.remove("expanded");
        responsePane.classList.remove("expanded");
        toggleResponseExpandButton.classList.remove("expanded-state");
        const iconSpan = toggleResponseExpandButton.querySelector('.material-icons');
        if (iconSpan) iconSpan.textContent = "unfold_more";
        toggleResponseExpandButton.setAttribute("aria-label", "Expand response area");
        toggleResponseExpandButton.title = "Expand response area";

        // Ensure assistant container and blog content pane revert to normal flex behavior
        assistantContainer.classList.remove("response-expanded-mode");
        if (blogContentPane) blogContentPane.classList.remove("response-condensed-mode");
    };
    
    const resetChat = () => {
      chatHistory = []; 
      currentSessionId = generateNewSessionId(); 
      console.log(
        `New AI session started: ${currentSessionId} for reader: ${currentReaderId}`,
      );
      renderChatHistory();
      collapseResponsePane(); // Ensure pane is collapsed on reset
    };

    resetChat();

    const updateButtonState = () => {
      if (questionInput.value.trim() === "") {
        askButton.textContent = "Close";
      } else {
        askButton.textContent = "Ask AI";
      }
    };

    // Listen to input changes on the textarea to update the button state
    questionInput.addEventListener("input", updateButtonState);

    // Initial state is set by the 'input' event dispatched from BlogPostLayout.astro
    // when the assistant is shown.

    askButton.addEventListener("click", async () => {
      const question = questionInput.value.trim();

      if (askButton.textContent === "Close") {
        assistantContainer.classList.add("hidden"); // Hide this assistant
        fabContainer.classList.remove("hidden"); // Show the FAB container
        resetChat(); // Clear history when closing
        // questionInput.value = ''; // Input is already cleared after asking or if it was empty
        // updateButtonState(); // Button state will be "Close" as input is empty
        return; // Stop further execution
      }

      // This part is for "Ask AI" functionality
      if (!question) {
        // Should ideally not be reached if button says "Ask AI", but as a fallback
        chatHistory.push({
          type: "error",
          content: "Please type a question first.",
        });
        renderChatHistory();
        return;
      }

      // Add user's question to history and render
      chatHistory.push({ type: "user", content: question });
      renderChatHistory();

      // Disable button and show loading state
      askButton.disabled = true;
      askButton.textContent = "Thinking...";

      // Add a system message for "Fetching answer..."
      chatHistory.push({
        type: "system",
        content: "<i>Fetching answer from AI...</i>",
      });
      renderChatHistory();

      // Prepare messages for the API, including history
      const messagesForApi = chatHistory
        .filter((msg) => msg.type === "user" || msg.type === "ai") // Only send user and AI messages
        .map((msg) => ({
          role: msg.type === "ai" ? "assistant" : "user", // Map 'ai' to 'assistant' for the API
          content: msg.content,
        }));
      // The current question is already the last item in messagesForApi if it's a 'user' message

      try {
        const useRag = ragToggle.checked; // Get the state of the toggle
        const apiResponse = await fetch("/api/ask", {
          // Calls your backend API endpoint
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          // Send the formatted messages array and the slug
          body: JSON.stringify({
            messages: messagesForApi,
            slug: postSlug,
            readerId: currentReaderId,
            sessionId: currentSessionId,
            currentUserQuestion: question, // This is the 'question' variable from the outer scope
            useRag: useRag, // Pass the selected mode
          }),
        });

        const data = await apiResponse.json();

        // Remove the "Fetching answer..." system message
        chatHistory.pop();

        if (apiResponse.ok) {
          chatHistory.push({ type: "ai", content: data.answer, durationMs: data.durationMs });
        } else {
          chatHistory.push({
            type: "error",
            content: `Error: ${data.error || "Failed to get an answer from the AI."}`,
          });
        }
      } catch (error) {
        console.error("Client-side fetch error:", error);
        // Remove the "Fetching answer..." system message if it's still there on error
        if (
          chatHistory.length > 0 &&
          chatHistory[chatHistory.length - 1].type === "system"
        ) {
          chatHistory.pop();
        }
        chatHistory.push({
          type: "error",
          content:
            "A network error occurred. Please check your connection and try again.",
        });
      } finally {
        renderChatHistory();
        // Re-enable button and update its text based on input content
        askButton.disabled = false;
        questionInput.value = ""; // Clear the input field
        updateButtonState(); // This will set it to "Close" because the input is now empty
      }
    });

    // Optional: Allow submitting with Enter key (Shift+Enter for new line)
    questionInput.addEventListener("keydown", (event) => {
      if (event.key === "Enter" && !event.shiftKey) {
        event.preventDefault(); 
        askButton.click(); 
      }
    });

    toggleResponseExpandButton.addEventListener("click", () => {
      isResponsePaneExpanded = !isResponsePaneExpanded;
      const iconSpan = toggleResponseExpandButton.querySelector('.material-icons');

      if (isResponsePaneExpanded) {
        responsePaneWrapper.classList.add("expanded");
        responsePane.classList.add("expanded");
        toggleResponseExpandButton.classList.add("expanded-state");
        if (iconSpan) iconSpan.textContent = "unfold_less";
        toggleResponseExpandButton.setAttribute("aria-label", "Collapse response area");
        toggleResponseExpandButton.title = "Collapse response area";

        // Make assistant container grow and blog content pane shrink
        assistantContainer.classList.add("response-expanded-mode");
        if (blogContentPane) blogContentPane.classList.add("response-condensed-mode");
      } else {
        // This branch is effectively what collapseResponsePane does for these classes
        responsePaneWrapper.classList.remove("expanded");
        responsePane.classList.remove("expanded");
        toggleResponseExpandButton.classList.remove("expanded-state");
        if (iconSpan) iconSpan.textContent = "unfold_more";
        toggleResponseExpandButton.setAttribute("aria-label", "Expand response area");
        toggleResponseExpandButton.title = "Expand response area";

        // Revert assistant container and blog content pane
        assistantContainer.classList.remove("response-expanded-mode");
        if (blogContentPane) blogContentPane.classList.remove("response-condensed-mode");
      }
    });
  });
</script>

<style>
  .assistant-ui-container {
    display: flex;
    flex-direction: column;
    flex-shrink: 0; 
    border-bottom: 1px solid var(--blgc-main-surface-secondary, #ddd); 
  }

  .assistant-pane {
    padding: 1rem;
  }

  #response-pane-wrapper {
    position: relative; /* For positioning the expand/collapse button */
    display: flex; /* To allow ai-response-pane to grow */
    flex-direction: column; /* Stack children vertically */
    /* Default: not growing */
    flex-grow: 0;
    /* transition for smooth height change if not using flex-grow for wrapper height */
  }

  #response-pane-wrapper.expanded {
    flex-grow: 1; /* Takes available space in assistant-ui-container */
    min-height: 0; /* Crucial for flex children to shrink properly */
  }

  #ai-response-pane {
    height: calc(5 * 1.4em + 2rem); 
    overflow-y: auto; 
    background-color: var(--blgc-main-surface-primary, #f9f9f9);
    line-height: 1.4em; 
    flex-grow: 0; /* Default: not growing */
    transition: flex-grow 0.3s ease-in-out; /* Smooth transition for growth */
  }

  #ai-response-pane.expanded {
    flex-grow: 1; /* Takes available space in response-pane-wrapper */
    min-height: 0; /* Crucial for flex children to shrink properly */
    height: auto; /* Override fixed height when expanded */
  }

  #ai-response-pane p {
    margin: 0;
  }

  .chat-message {
    padding: 0.5em 0.8em;
    margin-bottom: 0.5em;
    border-radius: 8px;
    max-width: 90%;
    word-wrap: break-word; 
  }

  .user-message {
    background-color: var(--blgc-text-primary, #333);
    color: white;
    margin-left: auto; 
    /* text-align: right; /* Replaced by flex alignment */
    display: flex;
    justify-content: flex-start; /* Aligns items to the start of the line */
    align-items: center; /* Vertically aligns them */
  }

  .ai-message {
    background-color: var(--blgc-main-surface-secondary, #e6d9ce);
    color: var(--blgc-text-primary, #3d3d3d);
    margin-right: auto; 
  }

  .system-message {
    font-style: italic;
    color: var(--blgc-text-secondary, #5d5d5d);
    text-align: center;
    font-size: 0.9em;
    background-color: transparent;
  }

  .error-message {
    background-color: #ffebee; 
    color: #c62828; 
    border: 1px solid #ef9a9a;
    margin-right: auto; 
  }

  .chat-pair-separator {
    height: 1px;
    background-color: var(--blgc-main-surface-secondary, #ddd);
    margin: 1em auto; 
    width: 95%; 
  }

  #ai-input-pane {
    background-color: #ffffff;
    border-bottom: 1px solid var(--blgc-main-surface-secondary, #ddd); 
  }

  .mode-toggle-container {
    display: flex;
    justify-content: flex-end;
    align-items: center;
    padding-top: 0.5rem;
    font-size: 0.85em;
  }

  .mode-toggle-label {
    display: inline-flex;
    align-items: center;
    cursor: pointer;
    color: var(--cstm-text-secondary);
  }

  .mode-toggle-checkbox {
    margin-right: 0.4rem;
    cursor: pointer;
  }

  .input-controls {
    display: flex;
    gap: 0.75rem; 
    align-items: stretch; 
  }

  .ai-panel-chip-button-wrapper {
    align-self: center; 
  }

  #ai-question-input {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-family: inherit; 
    font-size: 0.95rem;
    line-height: 1.4em; 
    resize: none; 
    box-sizing: border-box; 
  }

  .scrollable-pane {
    overflow-y: auto; 
  }

  .response-expand-toggle-button {
    position: absolute;
    right: 10px;
    background-color: var(--cstm-text-secondary, #5d5d5d);
    color: white;
    border: none;
    border-radius: 50%; /* Circular button */
    width: 32px; /* Adjust size */
    height: 32px; /* Adjust size */
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 10; /* Above content, below modals if any */
    box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    transition: background-color 0.2s ease, transform 0.3s ease-in-out; /* Removed 'bottom' from transition */
    /* Default state: "Expand" button, positioned below the normal response pane */
    bottom: -36px; /* (button height 32px + 4px gap) Below the pane */
  }

  .response-expand-toggle-button .material-icons {
    font-size: 20px; /* Adjust icon size */
  }

  .response-expand-toggle-button:hover {
    background-color: var(--cstm-text-primary, #3d3d3d);
  }

  .response-expand-toggle-button.expanded-state {
    /* "Collapse" button state, positioned at top-right of expanded pane */
    top: 10px; /* Inside, near top right */
    bottom: auto; /* Ensure bottom is not interfering */
  }

  /* Added styles for controlling overall layout when response pane is expanded */
  .assistant-ui-container.response-expanded-mode {
    flex-grow: 1; /* Make the assistant container take available vertical space */
    min-height: 0; /* Crucial for flex children to shrink/grow properly */
  }

  /* This rule targets a sibling of assistant-ui-container */
  /* MOVED TO BlogPostLayout.astro <style is:global> */
  /* .blog-content-pane.response-condensed-mode { */
  /*   display: none; /* Make the blog content pane disappear entirely */
  /* } */

  .feedback-container-inline { /* Renamed and adjusted for inline flow */
    display: inline-flex; /* Allows it to flow with text, and flex its children (buttons) */
    align-items: center; /* Vertically align buttons with the text line */
    gap: 0.5rem; /* Space between buttons */
    margin-left: 0.8rem; /* Space after the question text */
    /* flex-shrink: 0; /* Not a direct flex item of .user-message, so less critical here */
  }

  .feedback-button {
    background-color: transparent;
    border: 1px solid var(--blgc-main-surface-secondary, #ccc);
    border-radius: 4px;
    padding: 0.3em 0.7em; /* Increased padding for larger initial font */
    cursor: pointer;
    font-size: 1.3em; /* Made initial buttons noticeably bigger */
    transition: background-color 0.2s ease, border-color 0.2s ease, font-size 0.2s ease;
  }

  .feedback-button:hover:not(:disabled) {
    background-color: var(--blgc-main-surface-secondary, #eee);
    border-color: var(--cstm-text-secondary, #aaa);
  }

  .feedback-button.disabled {
    cursor: not-allowed;
    opacity: 0.6;
  }
  
  .feedback-button.selected {
    background-color: var(--cstm-main-surface-secondary, #e6d9ce); /* A distinct color for selected */
    border-color: var(--cstm-text-primary, #3d3d3d);
    font-size: 0.5em; /* Made the symbol even smaller when selected */
    padding: 0.5em 0.8em; /* Adjusted padding for the much smaller font */
  }

  .feedback-button.hidden {
    display: none;
  }

  .feedback-like:hover:not(:disabled) {
    /* Optional: specific hover for like */
  }

  .feedback-dislike:hover:not(:disabled) {
    /* Optional: specific hover for dislike */
  }

  .response-duration {
    font-size: 0.8em;
    color: var(--blgc-text-secondary, #5d5d5d);
    font-style: italic;
  }
</style>
