---
import Layout from '../layouts/Layout.astro';

const pageTitle = "Login";
const url = new URL(Astro.request.url);
const message = url.searchParams.get('message');
const redirectUrl = url.searchParams.get('redirect') || '/';


// Check if user is already logged in, if so, redirect to homepage or intended redirectUrl
if (Astro.locals.user) {
  return Astro.redirect(redirectUrl, 307);
}
---
<Layout title={pageTitle}>
  <main class="container auth-form">
    <h1>Login</h1>
    {message && <p class="success-message">{message}</p>}
    <form id="loginForm">
      <div class="form-group">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required />
      </div>
      <div class="form-group">
        <label for="password">Password:</label>
        <input type="password" id="password" name="password" required />
      </div>
      <button type="submit" class="btn">Login</button>
      <p id="formError" class="error-message" style="display:none;"></p>
    </form>
    <p class="auth-link">
      Don't have an account? <a href="/register">Register here</a>
    </p>
  </main>
</Layout>

<script define:vars={{ redirectUrl }}>
  const form = document.getElementById('loginForm') as HTMLFormElement;
  const emailInput = document.getElementById('email') as HTMLInputElement;
  const passwordInput = document.getElementById('password') as HTMLInputElement;
  const formError = document.getElementById('formError') as HTMLParagraphElement;

  form.addEventListener('submit', async (event) => {
    event.preventDefault();
    formError.style.display = 'none';
    formError.textContent = '';

    const email = emailInput.value;
    const password = passwordInput.value;

    try {
      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, password }),
      });

      const data = await response.json();

      if (response.ok) {
        // Login successful

        // **NEW: Attempt to sync device history**
        try {
          // Conceptual: retrieve device history slugs from localStorage
          // This part needs client-side logic to actually store and retrieve device history.
          // For now, we'll simulate having a few slugs.
          // Replace this with actual localStorage retrieval logic later.
          const deviceHistorySlugsString = localStorage.getItem('deviceReadHistory');
          let deviceHistorySlugs = [];
          if (deviceHistorySlugsString) {
            try {
                deviceHistorySlugs = JSON.parse(deviceHistorySlugsString);
                if (!Array.isArray(deviceHistorySlugs)) deviceHistorySlugs = [];
            } catch (e) {
                console.warn("Could not parse deviceReadHistory from localStorage", e);
                deviceHistorySlugs = [];
            }
          }

          // Example: const deviceHistorySlugs = ['slug-from-device1', 'slug-from-device2'];
          // This should be populated from localStorage or similar client-side storage.

          if (deviceHistorySlugs && deviceHistorySlugs.length > 0) {
            const syncResponse = await fetch('/api/user/sync-device-history', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                // Session cookie is automatically sent by the browser
              },
              body: JSON.stringify({ slugs: deviceHistorySlugs }),
            });
            if (syncResponse.ok) {
              console.log('Device history sync successful.');
              // Optionally, clear or update localStorage device history after successful sync
              // localStorage.removeItem('deviceReadHistory');
            } else {
              console.warn('Device history sync failed:', await syncResponse.text());
            }
          }
        } catch (syncError) {
          console.warn('Error during device history sync:', syncError);
        }
        // **END NEW**

        window.location.href = redirectUrl; // Redirect after login and sync attempt
      } else {
        formError.textContent = data.error || 'Login failed. Please check your credentials.';
        formError.style.display = 'block';
      }
    } catch (error) {
      console.error('Login error:', error);
      formError.textContent = 'An unexpected error occurred. Please try again.';
      formError.style.display = 'block';
    }
  });
</script>

<style>
  /* Using same styles as register.astro for consistency */
  .auth-form {
    max-width: 400px;
    margin: 2rem auto;
    padding: 2rem;
    border: 1px solid var(--cstm-border-color, #e0e0e0);
    border-radius: 8px;
    background-color: var(--cstm-background-secondary, #fff);
  }
  .auth-form h1 {
    text-align: center;
    margin-bottom: 1.5rem;
    font-family: var(--font-heading, serif);
  }
  .form-group {
    margin-bottom: 1rem;
  }
  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: bold;
  }
  .form-group input {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid var(--cstm-input-border, #ccc);
    border-radius: 4px;
    box-sizing: border-box;
    font-size: 1rem;
  }
  .btn {
    width: 100%;
    padding: 0.75rem;
    background-color: var(--cstm-primary-color, #007bff);
    color: white;
    border: none;
    border-radius: 4px;
    font-size: 1rem;
    cursor: pointer;
    transition: background-color 0.2s;
  }
  .btn:hover {
    background-color: var(--cstm-primary-hover, #0056b3);
  }
  .error-message {
    color: var(--cstm-error-color, red);
    margin-top: 1rem;
    text-align: center;
  }
   .success-message {
    color: var(--cstm-success-color, green);
    margin-bottom: 1rem;
    text-align: center;
    padding: 0.5rem;
    background-color: var(--cstm-success-background, #e6ffed);
    border: 1px solid var(--cstm-success-border, #b3ffc6);
    border-radius: 4px;
  }
  .auth-link {
    text-align: center;
    margin-top: 1.5rem;
  }
  .auth-link a {
    color: var(--cstm-link-color, #007bff);
    text-decoration: none;
  }
  .auth-link a:hover {
    text-decoration: underline;
  }
</style>
