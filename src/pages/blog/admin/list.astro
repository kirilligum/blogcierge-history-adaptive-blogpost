---
// src/pages/blog/admin/list.astro
import { getCollection } from "astro:content";
import AdminLayout from "../../../layouts/AdminLayout.astro";
import { formatDate } from "../../../utils/formatDate";
import type { R2Bucket } from "@cloudflare/workers-types";

const pageTitle = "Manage Blog Posts";
let allPosts = await getCollection("blog");
allPosts.sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());

// --- Server-Side Data Fetching & State Management ---
const r2Bucket = Astro.locals.runtime?.env?.BLGC_AI_LOGS_BUCKET as R2Bucket | undefined;
const postStatusMap = new Map<string, { status: string; [key: string]: any }>();

if (r2Bucket) {
  const indexKey = "qa-datasets/_index.json";
  const indexObject = await r2Bucket.get(indexKey);
  if (indexObject) {
    try {
      const indexData = await indexObject.json<Record<string, any>>();
      for (const slug in indexData) {
        postStatusMap.set(slug, indexData[slug]);
      }
    } catch (e) {
      console.error("Failed to parse QA dataset index file:", e);
    }
  }
}

const generationStartedSlug = Astro.url.searchParams.get('generation_started_for');
const generationLockedSlug = Astro.url.searchParams.get('generation_locked_for');

// Check for GitHub session to control UI elements
const hasGitHubSession = Astro.cookies.has("github_session");
---

<AdminLayout title={pageTitle}>
  <main class="admin-main">
    <h1>{pageTitle}</h1>
    <p>
      Generate a Q&A dataset for a post. The results will appear here automatically. Once successful, you can commit the data to the site.
    </p>

    <!-- GitHub Status Section -->
    <div id="github-status-container" class="github-status-container">
      <!-- Content will be populated by client-side script -->
    </div>

    <!-- Container for dynamic notifications -->
    <div id="notification-container"></div>

    {generationStartedSlug && (
      <div class="notification info" id="notification-generating" data-slug={generationStartedSlug}>
        Generation started for post: <strong>{generationStartedSlug}</strong>. This page will update automatically when it's done.
      </div>
    )}

    {generationLockedSlug && (
        <div class="notification warning">
            Generation for <strong>{generationLockedSlug}</strong> is already in progress. Please wait for it to complete.
        </div>
    )}

    <ul class="post-list">
      {
        allPosts.map((post) => {
          const statusInfo = postStatusMap.get(post.slug);
          const status = statusInfo?.status; // 'generating', 'success', 'error', or undefined ('idle')
          
          let statusText = "Idle";
          let statusClass = "status-idle";
          if (status === 'generating') {
            statusText = "Generating..."; // Placeholder, will be updated by script
            statusClass = "status-generating";
          } else if (status === 'success') {
            statusText = `Success (${new Date(statusInfo.generatedAt).toLocaleString()})`;
            statusClass = "status-success";
          } else if (status === 'error') {
            statusText = `Error (${new Date(statusInfo.timestamp).toLocaleString()})`;
            statusClass = "status-error";
          }

          return (
            <li class="post-item" id={`post-item-${post.slug}`}>
              <div class="post-header">
                <div class="post-info">
                  <a href={`/blog/${post.slug}/`} target="_blank">
                    {post.data.title}
                  </a>
                  <span class="post-date">
                    - Published on {formatDate(post.data.date)}
                  </span>
                </div>
                <div class="post-actions">
                  {status === 'success' && (
                    <button type="button" class="commit-btn" data-slug={post.slug} disabled={!hasGitHubSession}>
                      Commit to Site
                    </button>
                  )}
                  <form action="/api/admin/generate-qa-dataset" method="post" class="generate-form">
                    <input type="hidden" name="slug" value={post.slug} />
                    <button type="submit" class="generate-dataset-btn" disabled={status === 'generating'}>
                      {status === 'success' || status === 'error' ? "Regenerate" : "Generate"}
                    </button>
                  </form>
                  <span 
                    class={`status-indicator ${statusClass}`} 
                    data-status={status} 
                    data-started-at={status === 'generating' ? statusInfo.startedAt : ''}
                  >
                    {statusText}
                  </span>
                  {status === 'generating' && (
                    <button type="button" class="forget-job-btn" data-slug={post.slug}>Forget</button>
                  )}
                </div>
              </div>

              {status === 'error' && (
                <div class="qa-output-container error-container">
                  <h4>Last Generation Failed:</h4>
                  <p class="error-text">{statusInfo.error || 'An unknown error occurred.'}</p>
                </div>
              )}
            </li>
          )
        })
      }
    </ul>
  </main>
</AdminLayout>

<script define:vars={{ hasGitHubSession }}>
  document.addEventListener('DOMContentLoaded', () => {
    // --- Notification Helper ---
    function showNotification(message, type = 'info') {
      const container = document.getElementById('notification-container');
      if (!container) return;

      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      notification.textContent = message;
      
      container.innerHTML = '';
      container.appendChild(notification);

      setTimeout(() => {
        notification.style.transition = 'opacity 0.5s ease';
        notification.style.opacity = '0';
        setTimeout(() => notification.remove(), 500);
      }, 5000);
    }

    // --- GitHub Status Logic ---
    const githubStatusContainer = document.getElementById('github-status-container');
    if (githubStatusContainer) {
      if (hasGitHubSession) {
        githubStatusContainer.innerHTML = `<p>Connecting to GitHub...</p>`;
        fetch('/api/auth/github/status')
          .then(res => res.json())
          .then(data => {
            if (data.authenticated && data.user) {
              githubStatusContainer.innerHTML = `
                <div class="github-user-info">
                  <img src="${data.user.avatar_url}" alt="GitHub Avatar" class="github-avatar" />
                  <span>Connected as <strong>${data.user.login}</strong></span>
                </div>
                <a href="/api/admin/logout" class="github-logout-link">Logout from GitHub</a>
              `;
              // FIX: Enable commit buttons now that we know the session is valid.
              document.querySelectorAll('.commit-btn').forEach(btn => (btn as HTMLButtonElement).disabled = false);
            } else {
              githubStatusContainer.innerHTML = `
                <p>Your GitHub session may have expired.</p>
                <a href="/api/auth/github/login?from=/blog/admin/list" class="github-login-btn">Login with GitHub</a>
              `;
              document.querySelectorAll('.commit-btn').forEach(btn => (btn as HTMLButtonElement).disabled = true);
            }
          })
          .catch(err => {
            console.error("Error fetching GitHub status:", err);
            githubStatusContainer.innerHTML = `<p class="error-text">Could not verify GitHub status.</p>`;
          });
      } else {
        githubStatusContainer.innerHTML = `
          <p>Commiting Q&A data to the site requires GitHub authorization.</p>
          <a href="/api/auth/github/login?from=/blog/admin/list" class="github-login-btn">Login with GitHub</a>
        `;
      }
    }

    // --- Commit Button Logic ---
    document.querySelectorAll('.commit-btn').forEach(button => {
      button.addEventListener('click', async (event) => {
        const targetButton = event.currentTarget as HTMLButtonElement;
        const slug = targetButton.dataset.slug;
        if (!slug) return;

        targetButton.disabled = true;
        targetButton.textContent = 'Committing...';

        try {
          const response = await fetch('/api/admin/commit-qa-data', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ slug }),
          });

          const result = await response.json();

          if (response.ok) {
            // UX IMPROVEMENT: Change button to a link to the commit
            const link = document.createElement('a');
            link.href = result.url;
            link.textContent = 'View Commit';
            link.target = '_blank';
            link.className = 'commit-btn view-commit-link'; // Use same base style
            targetButton.replaceWith(link);
            showNotification('Commit successful! A new deployment has been triggered on Cloudflare.', 'success');
          } else {
            showNotification(`Commit failed: ${result.error || 'Unknown error'}`, 'error');
            targetButton.disabled = false;
            targetButton.textContent = 'Commit to Site';
          }
        } catch (error) {
          console.error('Error committing data:', error);
          showNotification('An error occurred while trying to commit the data. Check the console for details.', 'error');
          targetButton.disabled = false;
          targetButton.textContent = 'Commit to Site';
        }
      });
    });

    // --- Existing Logic (Polling, Timers, etc.) ---
    const forms = document.querySelectorAll('.generate-form');
    forms.forEach(form => {
      form.addEventListener('submit', (event) => {
        const button = (event.currentTarget as HTMLFormElement).querySelector('button[type="submit"]');
        if (button) {
          button.disabled = true;
          button.textContent = 'Starting...';
          const slug = (form.querySelector('input[name="slug"]') as HTMLInputElement).value;
          const statusIndicator = document.querySelector(`#post-item-${slug} .status-indicator`);
          if (statusIndicator) {
            statusIndicator.textContent = 'Generating...';
            statusIndicator.className = 'status-indicator status-generating';
          }
        }
      });
    });

    const notification = document.getElementById('notification-generating');
    if (notification) {
      const slug = notification.dataset.slug;
      if (slug) {
        let pollCount = 0;
        const maxPolls = 60;
        const pollInterval = 5000;

        const poll = setInterval(async () => {
          pollCount++;
          if (pollCount > maxPolls) {
            clearInterval(poll);
            window.location.href = '/blog/admin/list';
            return;
          }
          try {
            const response = await fetch(`/api/admin/qa-dataset-status?slug=${slug}`);
            if (!response.ok) {
              clearInterval(poll);
              return;
            }
            const data = await response.json();
            if (data.status === 'success' || data.status === 'error') {
              clearInterval(poll);
              window.location.href = '/blog/admin/list';
            }
          } catch (error) {
            console.error('Polling error:', error);
            clearInterval(poll);
          }
        }, pollInterval);
      }
    }

    document.querySelectorAll('.status-indicator[data-status="generating"]').forEach(indicator => {
      const startedAt = (indicator as HTMLElement).dataset.startedAt;
      if (!startedAt) return;
      const startTime = new Date(startedAt).getTime();
      const updateTimer = () => {
        const now = Date.now();
        const elapsedSeconds = Math.round((now - startTime) / 1000);
        const minutes = Math.floor(elapsedSeconds / 60);
        const seconds = elapsedSeconds % 60;
        indicator.textContent = `Generating... (${minutes}m ${seconds}s)`;
      };
      updateTimer();
      const timerId = setInterval(updateTimer, 1000);
      indicator.addEventListener('DOMNodeRemoved', () => clearInterval(timerId));
    });

    document.querySelectorAll('.forget-job-btn').forEach(button => {
      button.addEventListener('click', async (event) => {
        const targetButton = event.currentTarget as HTMLButtonElement;
        const slug = targetButton.dataset.slug;
        if (!slug) return;
        targetButton.disabled = true;
        targetButton.textContent = 'Forgetting...';
        try {
          const response = await fetch('/api/admin/forget-qa-job', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ slug }),
          });
          if (response.ok) {
            window.location.reload();
          } else {
            const errorData = await response.json();
            showNotification(`Failed to forget job: ${errorData.error || 'Unknown error'}`, 'error');
            targetButton.disabled = false;
            targetButton.textContent = 'Forget';
          }
        } catch (error) {
          console.error('Error forgetting job:', error);
          showNotification('An error occurred while trying to forget the job.', 'error');
          targetButton.disabled = false;
          targetButton.textContent = 'Forget';
        }
      });
    });
  });
</script>

<style>
  .admin-main {
    max-width: 900px;
    margin: 2rem auto;
    padding: 2rem;
    background-color: #fff;
    border-radius: 8px;
  }
  .admin-main h1 {
    font-family: var(--font-heading);
    margin-top: 0;
  }
  .notification {
    padding: 1rem;
    border-radius: 4px;
    margin-bottom: 1.5rem;
    opacity: 1;
  }
  .notification.info {
    background-color: #e6f7ff;
    border: 1px solid #91d5ff;
    color: #0050b3;
  }
  .notification.warning {
    background-color: #fffbe6;
    border: 1px solid #ffe58f;
    color: #ad8b00;
  }
  .notification.success {
    background-color: #d1fae5;
    border: 1px solid #6ee7b7;
    color: #065f46;
  }
  .notification.error {
    background-color: #fee2e2;
    border: 1px solid #fecaca;
    color: #991b1b;
  }
  .post-list {
    list-style: none;
    padding: 0;
  }
  .post-item {
    padding: 1.25rem 0;
    border-bottom: 1px solid #eee;
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }
  .post-item:last-child {
    border-bottom: none;
  }
  .post-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 1rem;
  }
  .post-info {
    flex-grow: 1;
  }
  .post-info a {
    font-weight: bold;
    font-size: 1.1em;
  }
  .post-date {
    font-size: 0.9em;
    color: #555;
    white-space: nowrap;
  }
  .post-actions {
    display: flex;
    align-items: center;
    gap: 1rem;
    flex-shrink: 0;
  }
  .generate-dataset-btn, .forget-job-btn, .commit-btn {
    background-color: var(--cstm-main-surface-secondary);
    color: var(--cstm-text-primary);
    border: 1px solid var(--cstm-text-secondary);
    padding: 0.4em 0.8em;
    border-radius: 4px;
    cursor: pointer;
    font-weight: bold;
    transition: background-color 0.2s ease;
    text-decoration: none; /* For the 'a' tag version */
    display: inline-block; /* For the 'a' tag version */
  }
  .generate-dataset-btn:hover:not(:disabled), .forget-job-btn:hover:not(:disabled), .commit-btn:hover:not(:disabled) {
    background-color: #dcd0c4;
  }
  .generate-dataset-btn:disabled, .forget-job-btn:disabled, .commit-btn:disabled {
    background-color: #f0f0f0;
    color: #aaa;
    cursor: not-allowed;
  }
  .forget-job-btn {
    background-color: #fee2e2;
    border-color: #fecaca;
    color: #991b1b;
  }
  .forget-job-btn:hover:not(:disabled) {
    background-color: #fecaca;
  }
  .commit-btn {
    background-color: #d1fae5;
    border-color: #6ee7b7;
    color: #065f46;
  }
  .commit-btn:hover:not(:disabled) {
    background-color: #a7f3d0;
  }
  .view-commit-link {
    background-color: #e0e7ff !important;
    border-color: #a5b4fc !important;
    color: #3730a3 !important;
  }
  .view-commit-link:hover {
    background-color: #c7d2fe !important;
  }
  .status-indicator {
    font-size: 0.9em;
    padding: 0.2em 0.6em;
    border-radius: 12px;
    font-weight: 500;
    min-width: 100px;
    text-align: center;
  }
  .status-idle {
    color: #555;
    background-color: #f0f0f0;
  }
  .status-generating {
    color: #0050b3;
    background-color: #e6f7ff;
  }
  .status-success {
    color: #1e6641;
    background-color: #dff7e9;
  }
  .status-error {
    color: #991b1b;
    background-color: #fee2e2;
  }
  .qa-output-container {
    margin-top: 0.5rem;
    padding: 0.75rem;
    background-color: #f9f9f9;
    border: 1px solid #eee;
    border-radius: 4px;
    font-size: 0.9em;
  }
  .qa-output-container.error-container {
    background-color: #fff5f5;
    border-color: #fecaca;
  }
  .qa-output-container h4 {
    margin-top: 0;
    margin-bottom: 0.5rem;
  }
  .error-text {
    color: #991b1b;
    font-weight: bold;
    margin: 0;
    white-space: pre-wrap;
    word-break: break-all;
  }
  .github-status-container {
    background-color: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 6px;
    padding: 1rem;
    margin-bottom: 1.5rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 1rem;
  }
  .github-user-info {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }
  .github-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    border: 2px solid #dee2e6;
  }
  .github-login-btn, .github-logout-link {
    background-color: #24292e;
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    text-decoration: none;
    font-weight: 500;
    transition: background-color 0.2s;
  }
  .github-login-btn:hover, .github-logout-link:hover {
    background-color: #4a5056;
  }
</style>
