---
// src/pages/blog/admin/list.astro
import { getCollection } from "astro:content";
import AdminLayout from "../../../layouts/AdminLayout.astro";
import { formatDate } from "../../../utils/formatDate";
import type { R2Bucket } from "@cloudflare/workers-types";

const pageTitle = "Manage Blog Posts";
let allPosts = await getCollection("blog");
allPosts.sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());

const r2Bucket = Astro.locals.runtime?.env?.BLGC_AI_LOGS_BUCKET as R2Bucket | undefined;
const postStatusMap = new Map<string, { status: string; [key: string]: any }>();

if (r2Bucket) {
  const indexKey = "qa-datasets/_index.json";
  const indexObject = await r2Bucket.get(indexKey);
  if (indexObject) {
    try {
      const indexData = await indexObject.json<Record<string, any>>();
      for (const slug in indexData) {
        postStatusMap.set(slug, indexData[slug]);
      }
    } catch (e) {
      console.error("Failed to parse QA dataset index file:", e);
    }
  }
}

const generationStartedSlug = Astro.url.searchParams.get('generation_started_for');
const generationLockedSlug = Astro.url.searchParams.get('generation_locked_for');

const hasGitHubSession = Astro.cookies.has("github_session");
---

<AdminLayout title={pageTitle}>
  <main class="admin-main">
    <h1>{pageTitle}</h1>
    <p>
      Generate a Q&A dataset for a post. The results will appear here automatically. Once successful, you can commit the data to the site, which will trigger a new deployment.
    </p>

    <div class="admin-grid">
      <div class="main-content">
        <!-- GitHub Status Section -->
        <div id="github-status-container" class="github-status-container">
          <p>Loading GitHub Status...</p>
        </div>

        <!-- Container for dynamic notifications -->
        <div id="notification-container"></div>

        {generationStartedSlug && (
          <div class="notification info" id="notification-generating" data-slug={generationStartedSlug}>
            Generation started for post: <strong>{generationStartedSlug}</strong>. This page will update automatically when it's done.
          </div>
        )}

        {generationLockedSlug && (
            <div class="notification warning">
                Generation for <strong>{generationLockedSlug}</strong> is already in progress. Please wait for it to complete.
            </div>
        )}

        <ul class="post-list">
          {
            allPosts.map((post) => {
              const statusInfo = postStatusMap.get(post.slug);
              const status = statusInfo?.status;
              
              let statusText = "Idle";
              let statusClass = "status-idle";
              if (status === 'generating') {
                statusText = "Generating...";
                statusClass = "status-generating";
              } else if (status === 'success') {
                statusText = `Ready to Commit`;
                statusClass = "status-success";
              } else if (status === 'error') {
                statusText = `Error (${formatDate(new Date(statusInfo.timestamp))})`;
                statusClass = "status-error";
              }

              return (
                <li class="post-item" id={`post-item-${post.slug}`}>
                  <div class="post-header">
                    <div class="post-info">
                      <a href={`/blog/${post.slug}/`} target="_blank">
                        {post.data.title}
                      </a>
                      <span class="post-date">
                        - Published on {formatDate(post.data.date)}
                      </span>
                    </div>
                    <div class="post-actions">
                      {status === 'success' && (
                        <button type="button" class="commit-btn" data-slug={post.slug} disabled>
                          Commit to Site
                        </button>
                      )}
                      <form action="/api/admin/generate-qa-dataset" method="post" class="generate-form">
                        <input type="hidden" name="slug" value={post.slug} />
                        <button type="submit" class="generate-dataset-btn" disabled={status === 'generating'}>
                          {status === 'success' || status === 'error' ? "Regenerate" : "Generate"}
                        </button>
                      </form>
                      <span 
                        class={`status-indicator ${statusClass}`} 
                        data-status={status} 
                        data-started-at={status === 'generating' ? statusInfo.startedAt : ''}
                      >
                        {statusText}
                      </span>
                      {status === 'generating' && (
                        <button type="button" class="forget-job-btn" data-slug={post.slug}>Forget</button>
                      )}
                      <button type="button" class="delete-btn" data-slug={post.slug} disabled={!hasGitHubSession} title="Delete Q&A data from repository">
                        Delete
                      </button>
                    </div>
                  </div>

                  {status === 'error' && (
                    <div class="qa-output-container error-container">
                      <h4>Last Generation Failed:</h4>
                      <p class="error-text">{statusInfo.error || 'An unknown error occurred.'}</p>
                    </div>
                  )}
                </li>
              )
            })
          }
        </ul>
      </div>
      <aside class="sidebar">
        <div id="deployments-container">
          <h2>Recent Deployments</h2>
          <ul id="deployment-list">
            <li>Loading...</li>
          </ul>
        </div>
      </aside>
    </div>
  </main>
</AdminLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    function showNotification(message, type = 'info') {
      const container = document.getElementById('notification-container');
      if (!container) return;
      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      notification.textContent = message;
      container.innerHTML = '';
      container.appendChild(notification);
      setTimeout(() => {
        notification.style.transition = 'opacity 0.5s ease';
        notification.style.opacity = '0';
        setTimeout(() => notification.remove(), 500);
      }, 5000);
    }

    function fetchAndRenderDeployments() {
      const list = document.getElementById('deployment-list');
      if (!list) return;
      fetch('/api/admin/deployments')
        .then(res => {
          const contentType = res.headers.get("content-type");
          if (contentType && contentType.indexOf("application/json") !== -1) {
            return res.json();
          } else {
            return res.text().then(text => { throw new Error(text) });
          }
        })
        .then(deployments => {
          if (deployments.error) {
            list.innerHTML = `<li>Error: ${deployments.error}</li>`;
            return;
          }
          list.innerHTML = deployments.slice(0, 5).map(d => `
            <li class="deployment-item">
              <span class="deployment-status ${d.latest_stage.status}">${d.latest_stage.name}</span>
              <a href="https://github.com/${d.deployment_trigger.metadata.repository_owner}/${d.deployment_trigger.metadata.repository_name}/commit/${d.deployment_trigger.metadata.commit_hash}" target="_blank" title="${d.deployment_trigger.metadata.commit_message}">
                ${d.deployment_trigger.metadata.commit_hash.substring(0, 7)}
              </a>
              <time>${new Date(d.created_on).toLocaleString()}</time>
            </li>
          `).join('');
        })
        .catch(err => {
          list.innerHTML = `<li>Error loading deployments. Check console for details.</li>`;
          console.error("Error fetching deployments:", err);
        });
    }

    const githubStatusContainer = document.getElementById('github-status-container');
    if (githubStatusContainer) {
      fetch('/api/auth/github/status', { credentials: 'include' })
        .then(res => {
          if (!res.ok) throw new Error(`GitHub status check failed: ${res.statusText}`);
          return res.json();
        })
        .then(data => {
          if (data.authenticated && data.user) {
            githubStatusContainer.innerHTML = `
              <div class="github-user-info">
                <img src="${data.user.avatar_url}" alt="GitHub Avatar" class="github-avatar" />
                <span>Connected as <strong>${data.user.login}</strong></span>
              </div>
              <a href="/api/admin/logout" class="github-logout-link">Logout from GitHub</a>
            `;
            document.querySelectorAll('.commit-btn, .delete-btn').forEach(btn => (btn as HTMLButtonElement).disabled = false);
            fetchAndRenderDeployments();
          } else {
            githubStatusContainer.innerHTML = `
              <p>Commiting or deleting Q&A data requires GitHub authorization.</p>
              <a href="/api/auth/github/login?from=/blog/admin/list" class="github-login-btn">Login with GitHub</a>
            `;
            document.querySelectorAll('.commit-btn, .delete-btn').forEach(btn => (btn as HTMLButtonElement).disabled = true);
          }
        })
        .catch(err => {
          console.error("Error fetching GitHub status:", err);
          githubStatusContainer.innerHTML = `<p class="error-text">Could not verify GitHub status.</p>`;
          document.querySelectorAll('.commit-btn, .delete-btn').forEach(btn => (btn as HTMLButtonElement).disabled = true);
        });
    }

    document.querySelectorAll('.commit-btn').forEach(button => {
      button.addEventListener('click', async (event) => {
        const targetButton = event.currentTarget as HTMLButtonElement;
        const slug = targetButton.dataset.slug;
        if (!slug) return;
        targetButton.disabled = true;
        targetButton.textContent = 'Committing...';
        try {
          const response = await fetch('/api/admin/commit-qa-data', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ slug }),
          });
          const result = await response.json();
          if (response.ok) {
            const link = document.createElement('a');
            link.href = result.url;
            link.textContent = 'View Commit';
            link.target = '_blank';
            link.className = 'commit-btn view-commit-link';
            targetButton.replaceWith(link);
            showNotification('Commit successful! A new deployment has been triggered.', 'success');
            setTimeout(fetchAndRenderDeployments, 2000);
          } else {
            showNotification(`Commit failed: ${result.error || 'Unknown error'}`, 'error');
            targetButton.disabled = false;
            targetButton.textContent = 'Commit to Site';
          }
        } catch (error) {
          showNotification('An error occurred while trying to commit the data.', 'error');
          targetButton.disabled = false;
          targetButton.textContent = 'Commit to Site';
        }
      });
    });

    document.querySelectorAll('.delete-btn').forEach(button => {
      button.addEventListener('click', async (event) => {
        const targetButton = event.currentTarget as HTMLButtonElement;
        const slug = targetButton.dataset.slug;
        if (!slug) return;
        
        targetButton.disabled = true;
        targetButton.textContent = 'Deleting...';
        try {
          const response = await fetch('/api/admin/delete-qa-data', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ slug }),
          });
          const result = await response.json();
          if (response.ok) {
            showNotification('Delete commit successful! A new deployment has been triggered.', 'success');
            targetButton.remove(); // Remove the button on success
          } else {
            showNotification(`Delete failed: ${result.error || 'Unknown error'}`, 'error');
            targetButton.disabled = false;
            targetButton.textContent = 'Delete';
          }
        } catch (error) {
          showNotification('An error occurred while trying to delete the data.', 'error');
          targetButton.disabled = false;
          targetButton.textContent = 'Delete';
        }
      });
    });

    const forms = document.querySelectorAll('.generate-form');
    forms.forEach(form => {
      form.addEventListener('submit', (event) => {
        const button = (event.currentTarget as HTMLFormElement).querySelector('button[type="submit"]');
        if (button) button.disabled = true;
      });
    });

    const notification = document.getElementById('notification-generating');
    if (notification) {
      const slug = notification.dataset.slug;
      if (slug) {
        const poll = setInterval(async () => {
          try {
            const response = await fetch(`/api/admin/qa-dataset-status?slug=${slug}`);
            if (!response.ok) { clearInterval(poll); return; }
            const data = await response.json();
            if (data.status === 'success' || data.status === 'error') {
              clearInterval(poll);
              window.location.href = '/blog/admin/list';
            }
          } catch (error) { clearInterval(poll); }
        }, 5000);
      }
    }

    document.querySelectorAll('.status-indicator[data-status="generating"]').forEach(indicator => {
      const startedAt = (indicator as HTMLElement).dataset.startedAt;
      if (!startedAt) return;
      const startTime = new Date(startedAt).getTime();
      const updateTimer = () => {
        const elapsedSeconds = Math.round((Date.now() - startTime) / 1000);
        indicator.textContent = `Generating... (${Math.floor(elapsedSeconds / 60)}m ${elapsedSeconds % 60}s)`;
      };
      updateTimer();
      const timerId = setInterval(updateTimer, 1000);
      indicator.addEventListener('DOMNodeRemoved', () => clearInterval(timerId));
    });

    document.querySelectorAll('.forget-job-btn').forEach(button => {
      button.addEventListener('click', async (event) => {
        const targetButton = event.currentTarget as HTMLButtonElement;
        const slug = targetButton.dataset.slug;
        if (!slug) return;
        targetButton.disabled = true;
        targetButton.textContent = 'Forgetting...';
        try {
          const response = await fetch('/api/admin/forget-qa-job', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ slug }),
          });
          if (response.ok) {
            window.location.reload();
          } else {
            const errorData = await response.json();
            showNotification(`Failed to forget job: ${errorData.error || 'Unknown error'}`, 'error');
            targetButton.disabled = false;
            targetButton.textContent = 'Forget';
          }
        } catch (error) {
          showNotification('An error occurred while trying to forget the job.', 'error');
          targetButton.disabled = false;
          targetButton.textContent = 'Forget';
        }
      });
    });
  });
</script>

<style>
  .admin-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 2rem;
  }
  @media (min-width: 1024px) {
    .admin-grid {
      grid-template-columns: 3fr 1fr;
    }
  }
  .sidebar {
    background-color: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 8px;
    padding: 1rem;
  }
  .sidebar h2 {
    margin-top: 0;
    font-family: var(--font-heading);
    font-size: 1.2em;
    border-bottom: 1px solid #e5e5e5;
    padding-bottom: 0.5rem;
  }
  #deployment-list {
    list-style: none;
    padding: 0;
    font-size: 0.9em;
  }
  .deployment-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem 0;
    border-bottom: 1px solid #e5e5e5;
    gap: 0.5rem;
  }
  .deployment-item:last-child {
    border-bottom: none;
  }
  .deployment-status {
    padding: 0.2em 0.5em;
    border-radius: 4px;
    font-weight: 500;
    text-transform: capitalize;
  }
  .deployment-status.success { background-color: #d1fae5; color: #065f46; }
  .deployment-status.failure { background-color: #fee2e2; color: #991b1b; }
  .deployment-status.active { background-color: #e0e7ff; color: #3730a3; }
  .admin-main { max-width: 1200px; }
  .notification { padding: 1rem; border-radius: 4px; margin-bottom: 1.5rem; opacity: 1; }
  .notification.info { background-color: #e6f7ff; border: 1px solid #91d5ff; color: #0050b3; }
  .notification.warning { background-color: #fffbe6; border: 1px solid #ffe58f; color: #ad8b00; }
  .notification.success { background-color: #d1fae5; border: 1px solid #6ee7b7; color: #065f46; }
  .notification.error { background-color: #fee2e2; border: 1px solid #fecaca; color: #991b1b; }
  .post-list { list-style: none; padding: 0; }
  .post-item { padding: 1.25rem 0; border-bottom: 1px solid #eee; display: flex; flex-direction: column; gap: 0.75rem; }
  .post-item:last-child { border-bottom: none; }
  .post-header { display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 1rem; }
  .post-info { flex-grow: 1; }
  .post-info a { font-weight: bold; font-size: 1.1em; }
  .post-date { font-size: 0.9em; color: #555; white-space: nowrap; }
  .post-actions { display: flex; align-items: center; gap: 0.5rem; flex-shrink: 0; }
  .generate-dataset-btn, .forget-job-btn, .commit-btn, .delete-btn { background-color: var(--cstm-main-surface-secondary); color: var(--cstm-text-primary); border: 1px solid var(--cstm-text-secondary); padding: 0.4em 0.8em; border-radius: 4px; cursor: pointer; font-weight: bold; transition: background-color 0.2s ease; text-decoration: none; display: inline-block; }
  .generate-dataset-btn:hover:not(:disabled), .forget-job-btn:hover:not(:disabled), .commit-btn:hover:not(:disabled), .delete-btn:hover:not(:disabled) { background-color: #dcd0c4; }
  .generate-dataset-btn:disabled, .forget-job-btn:disabled, .commit-btn:disabled, .delete-btn:disabled { background-color: #f0f0f0; color: #aaa; cursor: not-allowed; }
  .forget-job-btn { background-color: #fee2e2; border-color: #fecaca; color: #991b1b; }
  .forget-job-btn:hover:not(:disabled) { background-color: #fecaca; }
  .delete-btn { background-color: #fef2f2; border-color: #fca5a5; color: #b91c1c; }
  .delete-btn:hover:not(:disabled) { background-color: #fee2e2; }
  .commit-btn { background-color: #d1fae5; border-color: #6ee7b7; color: #065f46; }
  .commit-btn:hover:not(:disabled) { background-color: #a7f3d0; }
  .view-commit-link { background-color: #e0e7ff !important; border-color: #a5b4fc !important; color: #3730a3 !important; }
  .view-commit-link:hover { background-color: #c7d2fe !important; }
  .status-indicator { font-size: 0.9em; padding: 0.2em 0.6em; border-radius: 12px; font-weight: 500; min-width: 100px; text-align: center; }
  .status-idle { color: #555; background-color: #f0f0f0; }
  .status-generating { color: #0050b3; background-color: #e6f7ff; }
  .status-success { color: #1e6641; background-color: #dff7e9; }
  .status-error { color: #991b1b; background-color: #fee2e2; }
  .qa-output-container { margin-top: 0.5rem; padding: 0.75rem; background-color: #f9f9f9; border: 1px solid #eee; border-radius: 4px; font-size: 0.9em; }
  .qa-output-container.error-container { background-color: #fff5f5; border-color: #fecaca; }
  .qa-output-container h4 { margin-top: 0; margin-bottom: 0.5rem; }
  .error-text { color: #991b1b; font-weight: bold; margin: 0; white-space: pre-wrap; word-break: break-all; }
  .github-status-container { background-color: #f8f9fa; border: 1px solid #dee2e6; border-radius: 6px; padding: 1rem; margin-bottom: 1.5rem; display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 1rem; }
  .github-user-info { display: flex; align-items: center; gap: 0.75rem; }
  .github-avatar { width: 40px; height: 40px; border-radius: 50%; border: 2px solid #dee2e6; }
  .github-login-btn, .github-logout-link { background-color: #24292e; color: white; padding: 0.5rem 1rem; border-radius: 6px; text-decoration: none; font-weight: 500; transition: background-color 0.2s; }
  .github-login-btn:hover, .github-logout-link:hover { background-color: #4a5056; }
</style>
