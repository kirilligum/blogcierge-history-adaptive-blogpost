---
import { getCollection, getEntryBySlug, type CollectionEntry } from "astro:content";
import BlogPostLayout from "../../layouts/BlogPostLayout.astro";
import type { KVNamespace } from "@cloudflare/workers-types";
import { marked } from "marked";

// --- Helper functions & Constants ---
const TAILORED_CONTENT_CACHE_TTL_SECONDS = 60 * 60 * 24; // 1 day

function getApiKey(locals: Astro.Locals, devMode: boolean): string | undefined {
  if (locals.runtime?.env?.LLAMA_API_KEY) {
    return locals.runtime.env.LLAMA_API_KEY;
  }
  if (devMode && import.meta.env.LLAMA_API_KEY) {
    return import.meta.env.LLAMA_API_KEY;
  }
  console.warn("[SSR Tailoring] LLAMA_API_KEY not found.");
  return undefined;
}

async function getUserInteractionHistory(
  kv: KVNamespace,
  deviceId: string,
): Promise<{ readPostSlugs: string[]; chatMessages: any[] }> {
  const readPostSlugsSet = new Set<string>();
  const chatMessages: any[] = [];

  const { keys } = await kv.list({ prefix: `${deviceId}/` });

  for (const key of keys) {
    try {
      const data = await kv.get<any>(key.name, { type: "json" });
      if (data) {
        const parts = key.name.split("/");
        if (parts.length === 3 && data.read === true && parts[2]) {
          readPostSlugsSet.add(parts[2]);
        }
        if (data.messages && Array.isArray(data.messages)) {
          chatMessages.push(...data.messages.slice(-10));
        }
      }
    } catch (e) {
      console.error(
        `[SSR Tailoring] Error parsing KV data for key ${key.name}:`,
        e,
      );
    }
  }
  return { readPostSlugs: Array.from(readPostSlugsSet), chatMessages };
}

const LLAMA_API_URL = "https://api.llama.com/v1/chat/completions";
const DEFAULT_MODEL = "Llama-4-Maverick-17B-128E-Instruct-FP8";

async function getCachedTailoredContent(
  cache: KVNamespace,
  key: string,
): Promise<string | null> {
  try {
    const cachedContent = await cache.get(key);
    if (cachedContent) {
      console.log(`[SSR Tailoring] Cache HIT for ${key}`);
      return cachedContent;
    } else {
      console.log(`[SSR Tailoring] Cache MISS for ${key}`);
      return null;
    }
  } catch (e) {
    console.error(
      `[SSR Tailoring] Error reading from tailoredContentCache for ${key}:`,
      e,
    );
    return null;
  }
}

async function fetchAndProcessLlmResponse(
  llmApiUrl: string,
  apiKey: string,
  model: string,
  systemPrompt: string,
  currentPostSlug: string,
  deviceId: string,
): Promise<{ content: string | null; errorSource?: string }> {
  const payload = {
    model: model,
    messages: [{ role: "system", content: systemPrompt }],
    max_tokens: 4000,
    temperature: 0.5,
  };
  try {
    console.log(
      `[SSR Tailoring] Calling LLM for ${currentPostSlug}, user ${deviceId}. Model: ${model}`,
    );
    const llmResponse = await fetch(llmApiUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${apiKey}`,
      },
      body: JSON.stringify(payload),
    });

    if (llmResponse.ok) {
      const llmData = await llmResponse.json();
      const llmGeneratedMarkdown =
        llmData.completion_message?.content?.text ||
        llmData.choices?.[0]?.message?.content;

      if (llmGeneratedMarkdown && llmGeneratedMarkdown.trim() !== "") {
        return { content: llmGeneratedMarkdown };
      } else {
        return { content: null, errorSource: "llm_error_empty_content_ssr" };
      }
    } else {
      console.error(
        `[SSR Tailoring] LLM API error for ${currentPostSlug}, user ${deviceId}: Status ${llmResponse.status}`,
        await llmResponse.text(),
      );
      return { content: null, errorSource: `llm_error_api_status_${llmResponse.status}_ssr` };
    }
  } catch (error) {
    console.error(
      `[SSR Tailoring] LLM fetch exception for ${currentPostSlug}, user ${deviceId}:`,
      error,
    );
    return { content: null, errorSource: "llm_error_fetch_exception_ssr" };
  }
}

function cacheTailoredContent(
  cache: KVNamespace,
  key: string,
  content: string,
  ttl: number,
  locals: App.Locals,
): void {
  locals.runtime.ctx.waitUntil(
    cache
      .put(key, content, { expirationTtl: ttl })
      .then(() =>
        console.log(
          `[SSR Tailoring] Successfully cached tailored content for ${key}`,
        ),
      )
      .catch((e) =>
        console.error(
          `[SSR Tailoring] Error caching tailored content for ${key}:`,
          e,
        ),
      ),
  );
}

async function generatePersonalizedContent(
  currentEntry: CollectionEntry<"blog">,
  deviceId: string,
  locals: App.Locals,
  isDevMode: boolean,
): Promise<{ personalizedMarkdown: string | null; source: string }> {
  const userInteractionsKV = locals.runtime?.env
    ?.BLGC_USER_INTERACTIONS_KV as KVNamespace | undefined;
  const tailoredContentCache = locals.runtime?.env
    ?.BLGC_BLOGPOST_AI_CACHE as KVNamespace | undefined;

  const currentPostSlug = currentEntry.slug;

  if (!userInteractionsKV) {
    return { personalizedMarkdown: null, source: "original_ssr_no_kv_access_for_history" };
  }

  const { readPostSlugs, chatMessages } = await getUserInteractionHistory(
    userInteractionsKV,
    deviceId,
  );

  if (readPostSlugs.length === 0 && chatMessages.length === 0) {
    return { personalizedMarkdown: null, source: "original_ssr_no_history" };
  }

  let readPostsCombinedContent = "";
  for (const readSlug of readPostSlugs) {
    if (readSlug === currentPostSlug) continue;
    try {
      const readEntry = await getEntryBySlug("blog", readSlug);
      if (readEntry) {
        readPostsCombinedContent += `\n\n--- BEGIN READ BLOG POST: ${readSlug} (Title: ${readEntry.data.title}) ---\n${readEntry.body.substring(0, 2000)}...\n--- END READ BLOG POST: ${readSlug} ---`;
      }
    } catch (e) {
      console.warn(
        `[SSR Tailoring] Could not fetch content for read post ${readSlug}:`,
        e,
      );
    }
  }
  const chatHistoryString = chatMessages
    .map((msg) => `${msg.role}: ${msg.content.substring(0, 200)}...`)
    .join("\n");
  const originalPostContentForLLM = currentEntry.body;

  const systemPrompt = `
You are an expert blog post author. Rewrite the following "ORIGINAL BLOG POST CONTENT" for a reader with the provided "READER'S HISTORY".

READER'S HISTORY (Device ID: ${deviceId}):
--- BEGIN READER'S READ BLOG POSTS (Excerpts/Summaries) ---
${readPostsCombinedContent || "No other posts read by the user."}
--- END READER'S READ BLOG POSTS ---

--- BEGIN READER'S AI CHAT HISTORY (Recent/Truncated messages) ---
${chatHistoryString || "No chat history with AI assistant."}
--- END READER'S AI CHAT HISTORY ---

ORIGINAL BLOG POST CONTENT (Slug: ${currentPostSlug}, Title: ${currentEntry.data.title}):
--- BEGIN ORIGINAL CONTENT ---
${originalPostContentForLLM}
--- END ORIGINAL CONTENT ---

TASK:
Rewrite the "ORIGINAL BLOG POST CONTENT" as Markdown.
1. If concepts from the original post are well-covered in "READER'S READ BLOG POSTS" or the reader showed understanding in "READER'S AI CHAT HISTORY", summarize them very briefly or omit if redundant.
2. If concepts are new OR if the "READER'S AI CHAT HISTORY" indicates confusion, questions about related topics, or a desire to learn more about something relevant to the current post, expand on these concepts. Make clear connections to what the user asked about or previously read if relevant.
3. Maintain the core message, factual accuracy, and overall tone of the original post.
4. Output *only* the rewritten Markdown content for the blog post body. Do not include any frontmatter or titles unless it's part of the markdown body itself (e.g. H1 for title).
If the history is minimal or uninformative for personalization, the rewritten content should be very similar to the original, perhaps with slightly more explanation for basic terms.
The goal is to make the post maximally informative and engaging for *this specific reader*.
Focus on clarity and conciseness. The output should be ready-to-render Markdown.
`;

  const apiKey = getApiKey(locals, isDevMode);
  if (!apiKey) {
    return { personalizedMarkdown: null, source: "original_ssr_no_apikey" };
  }

  const llmResult = await fetchAndProcessLlmResponse(
    LLAMA_API_URL,
    apiKey,
    DEFAULT_MODEL,
    systemPrompt,
    currentPostSlug,
    deviceId,
  );

  if (llmResult.content) {
    if (tailoredContentCache) {
      const cacheKey = `tailored_ssr::${currentPostSlug}::${deviceId}`;
      cacheTailoredContent(tailoredContentCache, cacheKey, llmResult.content, TAILORED_CONTENT_CACHE_TTL_SECONDS, locals);
    }
    return { personalizedMarkdown: llmResult.content, source: "llm_generated_ssr" };
  } else {
    return { personalizedMarkdown: null, source: llmResult.errorSource || "llm_error_unknown_ssr" };
  }
}

export const prerender = false;

export async function getStaticPaths() {
  const blogEntries = await getCollection("blog");
  return blogEntries.map((entry) => ({
    params: { slug: entry.slug },
  }));
}

const { slug } = Astro.params;

if (typeof slug !== "string") {
  return new Response("Invalid request: Slug parameter is missing or invalid.", { status: 400 });
}

const entry = await getEntryBySlug("blog", slug);

if (!entry) {
  return new Response(null, { status: 404, statusText: "Not Found" });
}

// --- Fetch Q&A Data from local file ---
let qaData: { question: string; answer: string }[] | null = null;
try {
  const qaModule = await import(`../../data/qa/${slug}.json`);
  if (qaModule.default && Array.isArray(qaModule.default.data)) {
    qaData = qaModule.default.data;
    console.log(`[QA Fetch] Successfully loaded local Q&A data for slug: ${slug}`);
  }
} catch (e) {
  console.log(`[QA Fetch] No local Q&A data file found for slug: ${slug}.`);
}

const { Content: OriginalContentComponent } = await entry.render();
const originalMarkdown = entry.body;
let finalContentToRender: string | null = null;
let contentSourceDebug = "original_static_fallback_ssr";

const deviceId = Astro.cookies.get("blgcUserDeviceID_cookie")?.value;
const shouldPersonalize = Astro.url.searchParams.get('personalize') === 'true';

if (!deviceId) {
  contentSourceDebug = "original_ssr_no_deviceid_cookie";
} else if (!shouldPersonalize) {
  contentSourceDebug = "original_ssr_personalization_not_requested";
} else {
  const tailoredContentCache = Astro.locals.runtime?.env?.BLGC_BLOGPOST_AI_CACHE as KVNamespace | undefined;
  const cacheKey = `tailored_ssr::${entry.slug}::${deviceId}`;

  if (tailoredContentCache) {
    const cachedContent = await getCachedTailoredContent(tailoredContentCache, cacheKey);
    if (cachedContent) {
      finalContentToRender = cachedContent;
      contentSourceDebug = "cache_ssr";
    }
  }

  if (!finalContentToRender) {
    const personalizationResult = await generatePersonalizedContent(
      entry,
      deviceId,
      Astro.locals,
      import.meta.env.DEV,
    );
    finalContentToRender = personalizationResult.personalizedMarkdown;
    contentSourceDebug = personalizationResult.source;
  }
}

let processedMarkdownHtml: string | null = null;
if (finalContentToRender && typeof finalContentToRender === "string" && finalContentToRender.trim() !== "") {
  try {
    processedMarkdownHtml = await marked(finalContentToRender);
  } catch (e) {
    console.error(`[SSR Tailoring] Error during markdown processing for slug ${entry.slug}:`, e);
    contentSourceDebug += ";markdown_render_error";
    processedMarkdownHtml = null;
  }
}

console.log(`[SSR Blog Post] Slug: ${entry.slug}, DeviceID: ${deviceId || "N/A"}, Source: ${contentSourceDebug}`);
---

<BlogPostLayout frontmatter={entry.data} slug={entry.slug} qaData={qaData}>
  <div id="main-content-display">
    {processedMarkdownHtml ? <Fragment set:html={processedMarkdownHtml} /> : <OriginalContentComponent />}
  </div>

  {finalContentToRender && finalContentToRender !== originalMarkdown && (
    <>
      <div id="diff-container-wrapper">
        <button id="show-diff-button" type="button">Show Personalized Changes</button>
        <button id="toggle-content-button" type="button">Show Original Content</button>
      </div>
      <div id="diff-output" class="hidden"></div>
    </>
  )}
</BlogPostLayout>

<script define:vars={{ originalMarkdown, tailoredMarkdown: finalContentToRender, processedMarkdownHtmlFromAstro: processedMarkdownHtml }}>
  function escapeHtml(unsafe) {
    if (typeof unsafe !== "string") return "";
    return unsafe.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
  }

  document.addEventListener("DOMContentLoaded", () => {
    const showDiffButton = document.getElementById("show-diff-button");
    const diffOutputDiv = document.getElementById("diff-output");
    const toggleContentButton = document.getElementById("toggle-content-button");
    const mainContentDisplay = document.getElementById("main-content-display");

    if (toggleContentButton && mainContentDisplay && typeof originalMarkdown === 'string' && typeof marked?.parse === 'function') {
      const initiallyShowingPersonalized = typeof processedMarkdownHtmlFromAstro === 'string' && processedMarkdownHtmlFromAstro.trim() !== "";
      let isShowingPersonalized = initiallyShowingPersonalized;
      const clientSideOriginalHtml = originalMarkdown.trim() === "" ? "" : marked.parse(originalMarkdown);

      toggleContentButton.textContent = isShowingPersonalized ? "Show Original Content" : "Show Personalized Content";

      toggleContentButton.addEventListener("click", () => {
        if (isShowingPersonalized) {
          mainContentDisplay.innerHTML = clientSideOriginalHtml;
          toggleContentButton.textContent = "Show Personalized Content";
        } else {
          mainContentDisplay.innerHTML = processedMarkdownHtmlFromAstro || "";
          toggleContentButton.textContent = "Show Original Content";
        }
        isShowingPersonalized = !isShowingPersonalized;
      });
    }

    if (showDiffButton && diffOutputDiv && typeof originalMarkdown === 'string' && typeof tailoredMarkdown === 'string' && typeof Diff !== 'undefined') {
      showDiffButton.addEventListener("click", () => {
        if (diffOutputDiv.classList.contains("hidden")) {
          const diff = Diff.structuredPatch("original.md", "personalized.md", originalMarkdown, tailoredMarkdown, "", "", { context: 3 });
          let diffHtml = '<pre class="diff-view-output">';
          diffHtml += `<span class="diff-meta">--- Original Content</span>\n`;
          diffHtml += `<span class="diff-meta">+++ Personalized Content</span>\n`;
          diff.hunks.forEach(hunk => {
            diffHtml += `<span class="diff-hunk-header">@@ -${hunk.oldStart},${hunk.oldLines} +${hunk.newStart},${hunk.newLines} @@</span>\n`;
            hunk.lines.forEach(line => {
              const operation = line[0];
              const content = line.slice(1);
              if (operation === "+") diffHtml += `<span class="diff-added">+${escapeHtml(content)}</span>\n`;
              else if (operation === "-") diffHtml += `<span class="diff-removed">-${escapeHtml(content)}</span>\n`;
              else diffHtml += `<span class="diff-context"> ${escapeHtml(content)}</span>\n`;
            });
          });
          diffHtml += "</pre>";
          diffOutputDiv.innerHTML = diffHtml;
          diffOutputDiv.classList.remove("hidden");
          showDiffButton.textContent = "Hide Personalized Changes";
        } else {
          diffOutputDiv.classList.add("hidden");
          diffOutputDiv.innerHTML = "";
          showDiffButton.textContent = "Show Personalized Changes";
        }
      });
    }
  });
</script>

<style>
  #diff-container-wrapper { margin-top: 3rem; padding-top: 2rem; border-top: 1px solid var(--cstm-main-surface-secondary, #eee); text-align: center; display: flex; justify-content: center; gap: 1rem; flex-wrap: wrap; margin-bottom: 1.5rem; }
  #show-diff-button, #toggle-content-button { background-color: var(--cstm-main-surface-secondary, #e6d9ce); color: var(--cstm-text-primary, #3d3d3d); border: 1px solid var(--cstm-text-secondary, #5d5d5d); padding: 0.6em 1.2em; border-radius: 4px; cursor: pointer; font-weight: bold; font-family: var(--font-body); font-size: 0.95rem; transition: background-color 0.2s ease, color 0.2s ease; }
  #show-diff-button:hover, #toggle-content-button:hover { background-color: var(--cstm-text-secondary, #5d5d5d); color: white; }
  #diff-output { border: 1px solid var(--cstm-main-surface-secondary, #ddd); padding: 1.5rem; background-color: #fdfdfd; text-align: left; }
  #diff-output.hidden { display: none; }
  .diff-view-output { white-space: pre-wrap; word-wrap: break-word; background-color: #fff; padding: 1rem; border: 1px solid var(--cstm-main-surface-secondary, #eee); border-radius: 4px; max-height: 600px; overflow-y: auto; font-family: monospace; font-size: 0.9em; line-height: 1.5; margin: 0; }
  .diff-added { background-color: #e6ffed; color: #24292e; display: block; }
  .diff-removed { background-color: #ffeef0; color: #24292e; display: block; }
  .diff-context { color: #586069; display: block; }
  .diff-hunk-header { color: #0366d6; background-color: #f1f8ff; display: block; padding: 0.2em 0.5em; margin: 0.5em -1rem; font-weight: bold; }
  .diff-meta { color: #586069; display: block; font-weight: bold; margin-bottom: 0.5em; }
</style>
