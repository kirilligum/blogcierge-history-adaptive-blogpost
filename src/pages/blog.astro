---
import { getCollection } from "astro:content";
import Layout from "../layouts/Layout.astro";
import { formatDate } from "../utils/formatDate";

const pageTitle = "NYC Sustainability AI-assisted Blog";
// Fetch posts from the 'blog' collection
let allPosts = await getCollection("blog");
// Sort posts by date, newest first
allPosts.sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
---

<Layout title={pageTitle}>
  <div class="blog-list-container">
    <h1>{pageTitle}</h1>
    <ul class="post-list">
      {
        allPosts.map((post) => (
          <li class="post-entry">
            <!-- ADD THE NEW BUTTON HERE, before the title's <a> tag -->
            <a href={`/blog/${post.slug}/`} class="post-title-link">
              <h2 id={`title-h2-${post.slug}`}>
                {post.data.title}
                <button type="button" class="personalize-button" data-slug={post.slug} aria-label={`Personalize post: ${post.data.title}`}>
                  Personalize
                </button>
                <span class="read-indicator">
                  <input
                    type="checkbox"
                    class="read-status-checkbox"
                    data-slug={post.slug}
                    id={`read-cb-${post.slug}`}
                    aria-labelledby={`read-label-${post.slug} title-h2-${post.slug}`}
                  />
                  <label
                    for={`read-cb-${post.slug}`}
                    id={`read-label-${post.slug}`}
                    class="read-status-label"
                  >Read</label>
                </span>
              </h2>
            </a>
            <div id={`personalize-explanation-${post.slug}`} class="personalization-explanation hidden">
              {/* Content will be injected by JavaScript */}
            </div>
            <p class="post-meta">
              Published on{" "}
              <time datetime={post.data.date.toISOString()}>
                {formatDate(post.data.date)}
              </time>
              {post.data.author && ` by ${post.data.author}`}
            </p>
            {post.data.description && (
              <p class="post-description">{post.data.description}</p>
            )}
            {post.data.tags && post.data.tags.length > 0 && (
              <div class="post-tags-list">
                {post.data.tags.slice(0, 5).map(
                  (
                    tag, // Show up to 5 tags
                  ) => (
                    <span class="tag-item">{tag}</span>
                  ),
                )}
                {post.data.tags.length > 5 && <span class="tag-item">...</span>}
              </div>
            )}
            <a href={`/blog/${post.slug}/`} class="read-more-link">
              Read more &rarr;
            </a>
          </li>
        ))
      }
    </ul>

    <div class="static-personalization-explanation">
      <h2>About Blog Post Personalization</h2>
      <p>
        When you click the <span class="static-explanation-button-mention">Personalize</span> button next to a blog post title, we
        rewrite the article specifically for you. Here's how it works:
      </p>
      <ul>
        <li>
          <strong>Summaries for Familiar Concepts:</strong> Topics you've shown
          familiarity with (based on your reading history on this site or your
          interactions with our AI assistant) will be summarized briefly.
        </li>
        <li>
          <strong>Detailed Explanations for New Topics:</strong> Concepts that
          are new to you or that you've expressed confusion about will be
          explained in more detail, often connecting to your stated interests or
          previous questions.
        </li>
        <li>
          <strong>Core Integrity Maintained:</strong> The fundamental message,
          factual accuracy, and overall tone of the original blog post will
          always be preserved.
        </li>
      </ul>
      <p>
        Our goal is to make each post as informative and engaging as possible
        for your unique learning journey.
      </p>
    </div>
  </div>
</Layout>

<script>
  function getOrSetDeviceIDForBlogList() {
    if (typeof localStorage === 'undefined') {
      console.warn("localStorage not available for tracking.");
      return null;
    }
    let deviceId = localStorage.getItem("blgcUserDeviceID");
    if (!deviceId) {
      deviceId = crypto.randomUUID();
      localStorage.setItem("blgcUserDeviceID", deviceId);
    }
    return deviceId;
  }

  // Helper function to hide all personalization explanation messages
  function hideAllExplanations() {
      return null;
    }
    let deviceId = localStorage.getItem("blgcUserDeviceID");
    if (!deviceId) {
      deviceId = crypto.randomUUID();
      localStorage.setItem("blgcUserDeviceID", deviceId);
    }
    return deviceId;
  }

  // Helper function to hide all personalization explanation messages
  function hideAllExplanations() {
    document.querySelectorAll('.personalization-explanation').forEach(div => {
      div.classList.add('hidden');
    });
  }

  // NEW: Reusable function to fetch and update read statuses
  async function fetchAndUpdateReadStatuses() {
    const deviceId = getOrSetDeviceIDForBlogList();
    if (!deviceId) {
      console.error("Device ID not available for fetching read statuses.");
      document.querySelectorAll('.read-status-checkbox').forEach(cb => (cb as HTMLInputElement).disabled = true);
      return;
    }

    const currentDate = new Date().toISOString().split('T')[0]; // YYYY-MM-DD
    const postCheckboxes = document.querySelectorAll('.read-status-checkbox');

    if (postCheckboxes.length === 0) return;

    const slugs = Array.from(postCheckboxes).map(cb => (cb as HTMLInputElement).dataset.slug).filter(Boolean) as string[];

    if (slugs.length > 0) {
      try {
        const response = await fetch('/api/get-read-status', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ deviceId, date: currentDate, slugs }),
        });
        if (response.ok) {
          const readStatuses = await response.json();
          postCheckboxes.forEach(cbElement => {
            const cb = cbElement as HTMLInputElement;
            const slug = cb.dataset.slug;
            if (slug && typeof readStatuses[slug] === 'boolean') {
              cb.checked = readStatuses[slug];
            } else if (slug) {
              // If a slug is present but not in readStatuses, assume not read
              cb.checked = false;
            }
          });
        } else {
          console.error('Failed to fetch read statuses:', await response.text());
        }
      } catch (error) {
        console.error('Error fetching read statuses:', error);
      }
    }
  }
  
  const EXPLANATION_HTML = `
              <p><strong>Rewriting this article for you...</strong></p>
              <ul>
                <li>Concepts you're familiar with (from your reading history or AI chats) will be summarized.</li>
                <li>New or confusing topics will be explained in more detail, connecting to your interests.</li>
                <li>The core message and facts will remain the same.</li>
              </ul>
              <p><em>Please wait while we tailor your reading experience!</em></p>
            `;

  document.addEventListener('DOMContentLoaded', async () => {
    // Hide all explanations on initial load
    hideAllExplanations();
    // Fetch and update read statuses on initial load
    await fetchAndUpdateReadStatuses();

    // Handle bfcache (back/forward cache)
    window.addEventListener('pageshow', async (event) => {
      if (event.persisted) {
        console.log("Page shown from bfcache.");
        hideAllExplanations();
        await fetchAndUpdateReadStatuses(); // Re-fetch and update read statuses
      }
    });

    // Setup checkbox change listeners
    document.querySelectorAll('.read-status-checkbox').forEach(cbElement => {
      const cb = cbElement as HTMLInputElement;
      cb.addEventListener('change', async () => {
        // Fetch deviceId and currentDate fresh inside the event listener
        const deviceIdForEvent = getOrSetDeviceIDForBlogList();
        const currentDateForEvent = new Date().toISOString().split('T')[0];

        const slug = cb.dataset.slug;
        const newReadState = cb.checked;

        if (!slug || !deviceIdForEvent) {
            if(!deviceIdForEvent) console.error("Device ID not available for tracking read status change.");
            return;
        }

        try {
          const trackResponse = await fetch('/api/track-interaction', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              deviceId: deviceIdForEvent,
              date: currentDateForEvent,
              slug,
              interactionType: 'read',
              readState: newReadState
            }),
          });
          if (!trackResponse.ok) {
            console.error('Failed to update read status for slug:', slug, await trackResponse.text());
            // Revert checkbox state on failure to provide immediate feedback
            cb.checked = !newReadState;
          } else {
            console.log(`Read status for ${slug} updated to ${newReadState}`);
          }
        } catch (error) {
          console.error('Error updating read status for slug:', slug, error);
          // Revert checkbox state on failure
          cb.checked = !newReadState;
        }
      });
    });

    const personalizeButtons = document.querySelectorAll('.personalize-button');
    personalizeButtons.forEach(button => {
      button.addEventListener('click', (event) => {
        event.preventDefault(); // Prevent the parent <a> tag's navigation
        event.stopPropagation(); // Stop event from bubbling

        const slug = (button as HTMLButtonElement).dataset.slug;
        if (slug) {
          // Hide any other potentially visible explanations first
          hideAllExplanations();
          
          const explanationDiv = document.getElementById(`personalize-explanation-${slug}`);
          if (explanationDiv) {
            explanationDiv.innerHTML = `
              <p><strong>Rewriting this article for you...</strong></p>
              <ul>
                <li>Concepts you're familiar with (from your reading history or AI chats) will be summarized.</li>
                <li>New or confusing topics will be explained in more detail, connecting to your interests.</li>
                <li>The core message and facts will remain the same.</li>
              </ul>
              <p><em>Please wait while we tailor your reading experience!</em></p>
            `;
            explanationDiv.classList.remove('hidden');
          }
          // The getOrSetDeviceIDForBlogList() function is called at the beginning of DOMContentLoaded,
          // so the deviceId cookie required by the blog post page for personalization should already be set.
          window.location.href = `/blog/${slug}/?personalize=true`;
        }
      });
    });
  });
</script>

<style>
  .blog-list-container {
    max-width: 800px;
    margin: 2rem auto; /* Center the container and add some margin */
    padding: 0 1rem; /* Add padding on the sides */
    /* font-family, line-height, background-color, color, font-size inherited from blog.css .blog-list-container or body */
  }

  .post-title-link h2 {
    margin-bottom: 0; 
    /* Ensure h2 itself can have inline content align nicely if it wraps */
    /* display: inline; could be an option but h2 is block by default, better to have span inside be inline-block */
  }

  .read-indicator {
    display: inline-block; /* Allows it to flow with text but be stylable as a block */
    font-size: 0.8em; /* Relative to the h2's font size */
    color: var(--cstm-text-secondary);
    margin-left: 0.5em; /* Space after the title text */
    vertical-align: baseline; /* Aligns the bottom of the text with the title's baseline */
    white-space: nowrap; /* Prevents "[ ] Read" from breaking onto two lines */
  }

  /* Styles for the checkbox and label within the read-indicator */
  .read-status-checkbox {
    /* Style checkbox if needed, e.g., vertical-align: middle; */
    margin-right: 0.1em; /* Tiny space before the label text */
    cursor: pointer;
  }
  .read-status-label {
    cursor: pointer;
  }

  .blog-list-container h1 {
    text-align: center; /* Center the main blog title */
    margin-bottom: 2rem; /* Space below the main title */
    font-family: var(--font-heading); /* Ensure heading font is applied */
    font-size: 2.5rem; /* Match blog.css */
    color: var(--cstm-text-primary); /* Match blog.css */
    font-weight: 700; /* Match blog.css */
  }

  .post-list {
    list-style: none; /* Remove default list bullets */
    padding: 0;
    margin: 0;
  }

  .post-entry {
    background-color: #ffffff;
    border-bottom: 1px solid var(--cstm-main-surface-secondary); /* Separator line between posts */
    padding: 2rem 0.5rem; /* More vertical padding, less horizontal if needed or keep it simple */
    margin-bottom: 0; /* Remove bottom margin as border-bottom will separate */
    transition: background-color 0.3s ease; /* Subtle hover for background */
  }

  .post-entry:hover {
    background-color: #f9f9f9; /* Very light background change on hover */
  }

  .post-entry h2 {
    /* This styles the <h2> inside .post-title-link */
    margin-top: 0; /* Remove default top margin for heading inside entry */
    font-size: 1.5em; /* Adjust title size */
    color: var(--cstm-text-primary);
    font-family: var(--font-body); /* Questrial (sans-serif) for subheadings */
    font-weight: 700;
  }

  .post-title-link {
    text-decoration: none;
    color: inherit; /* Make h2 color apply */
    border-bottom: none; /* Remove underline from link itself */
  }

  .post-title-link:hover h2 {
    /* Style h2 on link hover */
    color: var(--cstm-text-secondary); /* Subtle hover color for title */
  }
  .post-title-link:hover {
    /* Ensure link itself doesn't get an underline from global styles */
    border-bottom: none;
  }

  .post-meta {
    font-size: 0.9em;
    color: var(--cstm-text-secondary);
    margin-bottom: 0.75rem;
    /* font-family is inherited */
  }

  .post-meta time {
    font-weight: 600;
  }

  .post-description {
    font-size: 1em;
    color: var(--cstm-text-primary); /* Slightly darker than meta text */
    line-height: 1.7; /* Inherited, but can be specific */
    margin-bottom: 1rem;
    /* font-family is inherited */
  }

  .read-more-link {
    display: inline-block;
    font-weight: 600;
    text-decoration: none;
    color: var(--cstm-text-secondary); /* Use a theme color */
    border-bottom: 1px solid transparent; /* Start with transparent border */
    transition:
      color 0.3s ease,
      border-color 0.3s ease;
    /* font-family is inherited */
  }

  .read-more-link:hover {
    color: var(--cstm-text-primary); /* Darken text on hover */
    border-bottom-color: var(--cstm-text-primary); /* Show underline on hover */
  }

  .post-tags-list {
    margin-top: 0.75rem;
    margin-bottom: 1rem;
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }
  .tag-item {
    background-color: var(--cstm-main-surface-primary);
    color: var(--cstm-text-secondary);
    padding: 0.2em 0.6em;
    border-radius: 12px;
    font-size: 0.8em;
    border: 1px solid var(--cstm-main-surface-secondary);
  }

  .personalize-button {
    background-color: var(--cstm-main-surface-secondary, #e6d9ce);
    color: var(--cstm-text-primary, #3d3d3d);
    border: 1px solid var(--cstm-text-secondary, #5d5d5d);
    padding: 0.4em 0.8em; /* Slightly smaller padding than other buttons */
    border-radius: 4px;
    cursor: pointer;
    font-weight: bold;
    font-family: var(--font-body);
    font-size: 0.85rem; /* Smaller font size */
    transition:
      background-color 0.2s ease,
      color 0.2s ease;
    margin-left: 0.5em; /* Space after the title text, before this button */
    margin-right: 0.5em; /* Space after this button, before read indicator */
    vertical-align: baseline; /* Align with the title text and read indicator */
  }

  .personalize-button:hover {
    background-color: var(--cstm-text-secondary, #5d5d5d);
    color: white;
  }

  /* Optional: Adjust layout if title and button are on the same line */
  .post-entry h2, .personalize-button {
    /* If you want them to align nicely on the same line, consider display: inline-block for h2 or flex for parent */
    /* For now, default block behavior for h2 and inline-block for button might work, or adjust .post-title-link */
  }
  .post-title-link {
    /* If personalize button is before this, you might want to adjust margins or display properties */
    /* For example, to ensure it flows correctly with the button: */
    display: inline-block; /* Or adjust as per your layout needs */
    vertical-align: middle;
  }

  .personalization-explanation {
    background-color: #f0f8ff; /* AliceBlue */
    border: 1px solid #add8e6; /* LightBlue */
    padding: 1em;
    margin-top: 0.75em; /* Space below the title block */
    margin-bottom: 1em; /* Space before the post meta */
    border-radius: 4px;
    font-size: 0.9em;
    color: #333;
  }
  .personalization-explanation p,
  .personalization-explanation ul {
    margin-top: 0;
    margin-bottom: 0.5em;
  }
  .personalization-explanation ul {
    padding-left: 1.5em;
  }
  .personalization-explanation li {
    margin-bottom: 0.25em;
  }

  .hidden {
    display: none;
  }

  .static-personalization-explanation {
    max-width: 800px; /* Match blog-list-container */
    margin: 3rem auto; /* Center and provide spacing */
    padding: 1.5rem;
    background-color: var(--cstm-main-surface-primary, #f7f5f2); /* Match page background */
    border: 1px solid var(--cstm-text-secondary, #5d5d5d);
    border-radius: 8px;
    font-size: 0.95em;
    color: var(--cstm-text-primary, #3d3d3d);
  }

  .static-personalization-explanation h2 {
    font-family: var(--font-heading);
    font-size: 1.5em;
    color: var(--cstm-text-primary);
    margin-top: 0;
    margin-bottom: 1rem;
    text-align: center;
  }

  .static-personalization-explanation p {
    line-height: 1.6;
    margin-bottom: 1em;
  }

  .static-personalization-explanation ul {
    list-style: disc;
    padding-left: 1.5em;
    margin-bottom: 1em;
  }

  .static-personalization-explanation li {
    margin-bottom: 0.5em;
  }

  .static-explanation-button-mention {
    background-color: var(--cstm-main-surface-secondary, #e6d9ce);
    color: var(--cstm-text-primary, #3d3d3d);
    border: 1px solid var(--cstm-text-secondary, #5d5d5d);
    padding: 0.2em 0.5em;
    border-radius: 4px;
    font-weight: bold;
    font-family: var(--font-body);
    font-size: 0.85em; /* Relative to parent's 0.95em */
    display: inline-block;
    vertical-align: baseline;
    line-height: 1; /* Adjust line-height to prevent affecting surrounding text too much */
  }
</style>
