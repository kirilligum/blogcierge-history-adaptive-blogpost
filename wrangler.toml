#:schema node_modules/wrangler/config-schema.json
name = "website"
compatibility_date = "2024-09-23"
compatibility_flags = ["nodejs_compat"]
pages_build_output_dir = "./dist"

# NOTE: How bindings are configured.
#
# For local development (`yarn preview`) and production deployments,
# bindings are defined in this file.
#
# Run `yarn setup:cloudflare` to automatically create the necessary
# Cloudflare resources and populate this file with their IDs.
#
# API keys and other secrets are loaded from the `.dev.vars` file for
# local development, and from the Cloudflare Pages dashboard for production.
#
# REQUIRED SECRETS:
# - LLAMA_API_KEY: For LLM providers.
# - GITHUB_CLIENT_ID: For the GitHub OAuth App.
# - GITHUB_CLIENT_SECRET: For the GitHub OAuth App.

# IMPORTANT: The following IDs are specific to a development environment.
# Before publishing this repository for public use, these IDs should be
# replaced with placeholders (e.g., "placeholder_id_for_..."), and users
# should be instructed to run the `yarn setup:cloudflare` script.

[[kv_namespaces]]
binding = "BLGC_ADMIN_KV"
id = "2a9d5353e231403d823a105f3f78535a"

[[kv_namespaces]]
binding = "BLGC_BLOGPOST_AI_CACHE"
id = "e05a15d829484001a8d3d37ba61cbe5f"

[[kv_namespaces]]
binding = "BLGC_SITE_CONTENT_CACHE"
id = "85199e6b7bc24882a6f7891a00910730"

[[kv_namespaces]]
binding = "BLGC_USER_INTERACTIONS_KV"
id = "de3646218ddd4be9ab12ca81bf6c8690"

[[r2_buckets]]
binding = "BLGC_AI_LOGS_BUCKET"
bucket_name = "blgc-blogpost-ai-turns"

[[d1_databases]]
binding = "BLGC_RAG_DB"
database_name = "blgc-rag-db"
database_id = "cba53c92-b7b2-4a33-84d9-6c923b22bf9a"

[[vectorize]]
binding = "BLGC_RAG_VECTORS"
index_name = "blgc-rag-vectors"

# Bind the Workers AI model catalog. Run machine learning models, powered by serverless GPUs, on Cloudflare’s global network
# Docs: https://developers.cloudflare.com/pages/functions/bindings/#workers-ai
[ai]
binding = "AI"

# Automatically place your workloads in an optimal location to minimize latency.
# If you are running back-end logic in a Pages Function, running it closer to your back-end infrastructure
# rather than the end user may result in better performance.
# Docs: https://developers.cloudflare.com/pages/functions/smart-placement/#smart-placement
# [placement]
# mode = "smart"

# Variable bindings. These are arbitrary, plaintext strings (similar to environment variables)
# Docs:
# - https://developers.cloudflare.com/pages/functions/bindings/#environment-variables
# Note: Use secrets to store sensitive data.
# - https://developers.cloudflare.com/pages/functions/bindings/#secrets
# [vars]
# MY_VARIABLE = "production_value"

# Bind a D1 database. D1 is Cloudflare’s native serverless SQL database.
# Docs: https://developers.cloudflare.com/pages/functions/bindings/#d1-databases
# [[d1_databases]]
# binding = "MY_DB"
# database_name = "my-database"
# database_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"

# Bind a Durable Object. Durable objects are a scale-to-zero compute primitive based on the actor model.
# Durable Objects can live for as long as needed. Use these when you need a long-running "server", such as in realtime apps.
# Docs: https://developers.cloudflare.com/workers/runtime-apis/durable-objects
# [[durable_objects.bindings]]
# name = "MY_DURABLE_OBJECT"
# class_name = "MyDurableObject"
# script_name = 'my-durable-object'

# Bind a KV Namespace. Use KV as persistent storage for small key-value pairs.
# Docs: https://developers.cloudflare.com/pages/functions/bindings/#kv-namespaces
# [[kv_namespaces]]
# binding = "MY_KV_NAMESPACE"
# id = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

# Bind a Queue producer. Use this binding to schedule an arbitrary task that may be processed later by a Queue consumer.
# Docs: https://developers.cloudflare.com/pages/functions/bindings/#queue-producers
# [[queues.producers]]
# binding = "MY_QUEUE"
# queue = "my-queue"

# Bind an R2 Bucket. Use R2 to store arbitrarily large blobs of data, such as files.
# Docs: https://developers.cloudflare.com/pages/functions/bindings/#r2-buckets
# [[r2_buckets]]
# binding = "MY_BUCKET"
# bucket_name = "my-bucket"

# Bind another Worker service. Use this binding to call another Worker without network overhead.
# Docs: https://developers.cloudflare.com/pages/functions/bindings/#service-bindings
# [[services]]
# binding = "MY_SERVICE"
# service = "my-service"
