import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';

const BINDINGS = {
  kv: [
    'BLGC_ADMIN_KV',
    'BLGC_BLOGPOST_AI_CACHE',
    'BLGC_SITE_CONTENT_CACHE',
    'BLGC_USER_INTERACTIONS_KV',
  ],
  r2: ['BLGC_AI_LOGS_BUCKET'],
};

function runCommand(command) {
  try {
    console.log(`\n> Executing: ${command}`);
    // We add --json flag to get predictable output
    const output = execSync(`${command} --json`, { encoding: 'utf8' });
    const parsedOutput = JSON.parse(output);
    console.log(`‚úÖ Success!`);
    return parsedOutput;
  } catch (error) {
    console.error(`\n‚ùå Error executing command: ${command}`);
    // Try to parse JSON from stderr for more specific wrangler errors
    try {
        const errorJson = JSON.parse(error.stderr);
        console.error(`   Error Code: ${errorJson.code}`);
        console.error(`   Error Message: ${errorJson.message}`);
    } catch (e) {
        console.error(error.stderr || error.stdout || error.message);
    }
    process.exit(1);
  }
}

function main() {
  console.log('üöÄ Starting Cloudflare resource setup...');
  console.log('This script will create the necessary KV namespaces and R2 bucket for BlogCierge.');
  console.log('Please ensure you are logged into wrangler (`npx wrangler login`).');

  const devVarsContent = [];
  const productionInstructions = [];

  // Create KV Namespaces
  console.log('\n--- Creating KV Namespaces ---');
  for (const name of BINDINGS.kv) {
    const output = runCommand(`npx wrangler kv:namespace create ${name}`);
    devVarsContent.push(`${name}_ID="${output.id}"`);
    productionInstructions.push({
      type: 'KV Namespace',
      binding: name,
      id: output.id,
    });
  }

  // Create R2 Bucket
  console.log('\n--- Creating R2 Bucket ---');
  for (const name of BINDINGS.r2) {
    runCommand(`npx wrangler r2 bucket create ${name}`);
    devVarsContent.push(`${name}_NAME="${name}"`);
    productionInstructions.push({
      type: 'R2 Bucket',
      binding: name,
      bucket_name: name,
    });
  }

  // Create .dev.vars file
  const devVarsPath = path.join(process.cwd(), '.dev.vars');
  console.log(`\n--- Creating ${path.basename(devVarsPath)} for local development ---`);
  const finalDevVars = [
    '# This file was generated by scripts/setup-cloudflare.js for local development.',
    '# Copy your API keys from .dev.vars.example and add them here.',
    'OPENROUTER_API_KEY=""',
    'LLAMA_API_KEY=""',
    '',
    ...devVarsContent,
  ].join('\n');

  fs.writeFileSync(devVarsPath, finalDevVars);
  console.log(`‚úÖ Successfully created ${devVarsPath}.`);
  console.log('IMPORTANT: Remember to add your API keys to this file for local testing.');

  // Print instructions for production
  console.log('\n\n‚úÖ‚úÖ‚úÖ Setup Complete! ‚úÖ‚úÖ‚úÖ');
  console.log('\n--- ACTION REQUIRED: Configure Production Environment ---');
  console.log('For your deployed application to work, you must add the following bindings in your Cloudflare Pages project dashboard.');
  console.log('Go to your Pages Project > Settings > Environment variables > Production bindings:');
  
  productionInstructions.forEach(instr => {
    console.log(`\n‚û°Ô∏è Add Binding:`);
    console.log(`   - Binding name: ${instr.binding}`);
    console.log(`   - Type: ${instr.type}`);
    if (instr.id) {
      console.log(`   - KV namespace ID: ${instr.id}`);
    }
    if (instr.bucket_name) {
      console.log(`   - R2 bucket name: ${instr.bucket_name}`);
    }
  });
  console.log('\nAlso, add your OPENROUTER_API_KEY and LLAMA_API_KEY as production environment variables (not bindings) in the same dashboard section.');
  console.log('\nAfter configuring the dashboard, commit and push your changes to deploy!');
}

main();
